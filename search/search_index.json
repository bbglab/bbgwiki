{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the BBG-Wiki! \u00b6 This website is meant to include information of all the tools and data used by the bbglab team, so that it serves both as a guide to understand them and as a place where to find information about everything.","title":"Home"},{"location":"#welcome-to-the-bbg-wiki","text":"This website is meant to include information of all the tools and data used by the bbglab team, so that it serves both as a guide to understand them and as a place where to find information about everything.","title":"Welcome to the BBG-Wiki!"},{"location":"Edit_BBG-Wiki/","text":"Edit BBG-Wiki \u00b6 The main language of the wiki documentation is Markdown . There are several online editors which can help writting Markdown text and automatically visualize what is being written. StackEdit Editor.md This wiki is stored in a GitHub repository , where each section of the wiki corresponds to a single Markdown file ( *.md ). By editing these files either online or locally, the wiki can be updated by everyone. Markdown cheatsheet Online \u00b6 Go to the bbg-wiki repository and edit any file inside the docs/ folder, which contains all the files of the documentation. Local \u00b6 Installation \u00b6 git clone git@github.com:bbglab/bbgwiki.git pip install -r bbgwiki/requirements.txt Error: My Github password seems to be wrong somehow... It might be the case that at some point of this process, it asks for the Github user and password. However, although you should introduce your Github user, the password that it asks is not your Github password . In order to know what to introduce here, you need to generate a ssh key following one of these two options: From the Github web : Go to Github and login Click on your profile on the top right Settings > Developer settings (bottom option of the left bar) > Personal access tokens > Generate new token Introduce your Github password Check all the boxes of the checklist Click \"Generate token\". Copy the generated key (looks like a bunch of random letters) and paste it in your terminal where it previously asked for the password. From the terminal : Execute the command: ssh-keygen -o -t rsa -C \u201cssh@github.com\u201d Click \"Enter\" on all the options (unless you want to save the key in a specific file, but it is not mandatory) Execute the next command to see the generated key (if you selected a specific file, change the id_rsa in the command by the name you inputed). cat id_rsa.pub Copy the output and paste it in your terminal where it previously asked for the password. Commands \u00b6 Running at localhost (to try stuff before updating the main web) mkdocs serve Update web: git add <edited file or directory> git commit -m \"Message\" git push References \u00b6 Carlos L\u00f3pez Elorduy","title":"Edit BBG-Wiki"},{"location":"Edit_BBG-Wiki/#edit-bbg-wiki","text":"The main language of the wiki documentation is Markdown . There are several online editors which can help writting Markdown text and automatically visualize what is being written. StackEdit Editor.md This wiki is stored in a GitHub repository , where each section of the wiki corresponds to a single Markdown file ( *.md ). By editing these files either online or locally, the wiki can be updated by everyone. Markdown cheatsheet","title":"Edit BBG-Wiki"},{"location":"Edit_BBG-Wiki/#online","text":"Go to the bbg-wiki repository and edit any file inside the docs/ folder, which contains all the files of the documentation.","title":"Online"},{"location":"Edit_BBG-Wiki/#local","text":"","title":"Local"},{"location":"Edit_BBG-Wiki/#installation","text":"git clone git@github.com:bbglab/bbgwiki.git pip install -r bbgwiki/requirements.txt Error: My Github password seems to be wrong somehow... It might be the case that at some point of this process, it asks for the Github user and password. However, although you should introduce your Github user, the password that it asks is not your Github password . In order to know what to introduce here, you need to generate a ssh key following one of these two options: From the Github web : Go to Github and login Click on your profile on the top right Settings > Developer settings (bottom option of the left bar) > Personal access tokens > Generate new token Introduce your Github password Check all the boxes of the checklist Click \"Generate token\". Copy the generated key (looks like a bunch of random letters) and paste it in your terminal where it previously asked for the password. From the terminal : Execute the command: ssh-keygen -o -t rsa -C \u201cssh@github.com\u201d Click \"Enter\" on all the options (unless you want to save the key in a specific file, but it is not mandatory) Execute the next command to see the generated key (if you selected a specific file, change the id_rsa in the command by the name you inputed). cat id_rsa.pub Copy the output and paste it in your terminal where it previously asked for the password.","title":"Installation"},{"location":"Edit_BBG-Wiki/#commands","text":"Running at localhost (to try stuff before updating the main web) mkdocs serve Update web: git add <edited file or directory> git commit -m \"Message\" git push","title":"Commands"},{"location":"Edit_BBG-Wiki/#references","text":"Carlos L\u00f3pez Elorduy","title":"References"},{"location":"Cluster_basics/Backups/","text":"Backups \u00b6 Description \u00b6 Reference \u00b6","title":"Backups"},{"location":"Cluster_basics/Backups/#backups","text":"","title":"Backups"},{"location":"Cluster_basics/Backups/#description","text":"","title":"Description"},{"location":"Cluster_basics/Backups/#reference","text":"","title":"Reference"},{"location":"Cluster_basics/Headers/","text":"Headers \u00b6 Description \u00b6 When you are in the cluster, in order to visualize the column names from a file with a table, you can use the command: headers name_file.tsv This will return you the name of the columns with the number of the column, for example: 1 tumor_type 2 gene 3 chr 4 pos 5 ref 6 alt Reference \u00b6 Jordi Deu-Pons Paula Gomis","title":"Headers"},{"location":"Cluster_basics/Headers/#headers","text":"","title":"Headers"},{"location":"Cluster_basics/Headers/#description","text":"When you are in the cluster, in order to visualize the column names from a file with a table, you can use the command: headers name_file.tsv This will return you the name of the columns with the number of the column, for example: 1 tumor_type 2 gene 3 chr 4 pos 5 ref 6 alt","title":"Description"},{"location":"Cluster_basics/Headers/#reference","text":"Jordi Deu-Pons Paula Gomis","title":"Reference"},{"location":"Cluster_basics/Interactive/","text":"Interactive \u00b6 The interactive command gives to the user an interactive shell in the cluster with slurm allocation. In other words, it allocates the user to a specific node of the cluster so that the jobs can be executed there without disturbing the rest of the users. Usage \u00b6 Once you enter the bbgcluster, you will see in the terminal <username>@login01 . It is here where, if you want to be allocated to your own node, you can just run the command: $ interactive salloc: Granted job allocation ******* If the login01 has changed to bbgn### where ### is the number identifying the current node. Apart from the basic use, there are optional arguments/flags for extra features: interactive [ -c ] [ -m ] [ -w ] [ -J ] [ -x ] -c : Number of CPU cores (default: 1) -m : Total amount of memory (GB) (default: 8 [GB]) -w : Target node -J : Job name -x : Binary that you want to run interactively Reference \u00b6 Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Interactive"},{"location":"Cluster_basics/Interactive/#interactive","text":"The interactive command gives to the user an interactive shell in the cluster with slurm allocation. In other words, it allocates the user to a specific node of the cluster so that the jobs can be executed there without disturbing the rest of the users.","title":"Interactive"},{"location":"Cluster_basics/Interactive/#usage","text":"Once you enter the bbgcluster, you will see in the terminal <username>@login01 . It is here where, if you want to be allocated to your own node, you can just run the command: $ interactive salloc: Granted job allocation ******* If the login01 has changed to bbgn### where ### is the number identifying the current node. Apart from the basic use, there are optional arguments/flags for extra features: interactive [ -c ] [ -m ] [ -w ] [ -J ] [ -x ] -c : Number of CPU cores (default: 1) -m : Total amount of memory (GB) (default: 8 [GB]) -w : Target node -J : Job name -x : Binary that you want to run interactively","title":"Usage"},{"location":"Cluster_basics/Interactive/#reference","text":"Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Reference"},{"location":"Cluster_basics/NewFolders/","text":"New folder in workspace \u00b6 Description \u00b6 Appart from your own personal folder, there are four main shared folders within the /workspace folder in the cluster. These are: Projects : analysis/results files. Backup and snapshots. High safe. Datasets : data files downloaded from public/private repositories. Re-downloading is possible/straightforward. Backup. Medium safe. No backup : intermediate files generated during pipelines execution or big amount of data re-downloadable. Low safe. Datasafe : datasets generated by us or from collaborators, not in public repositories. Snapshots. High safe. If you want to create a new folder inside one of the previously mentioned, perform the following instructions: Go to the bbgdashboard Log in (or check that you are already logged in) Go to the Cluster tab. Click on one of the four options where you want to create your folder. Write the title and a description of the new folder and click \"OK\". Possible errors \u00b6 If after clicking the \"OK\" button an ERROR message is displayed: Make sure that you are logged in in the dashboard itself. Try doing everything from an incognito window . Reference \u00b6 Carlos L\u00f3pez Elorduy Miguel Grau Jordi Deu-Pons","title":"New folder in workspace"},{"location":"Cluster_basics/NewFolders/#new-folder-in-workspace","text":"","title":"New folder in workspace"},{"location":"Cluster_basics/NewFolders/#description","text":"Appart from your own personal folder, there are four main shared folders within the /workspace folder in the cluster. These are: Projects : analysis/results files. Backup and snapshots. High safe. Datasets : data files downloaded from public/private repositories. Re-downloading is possible/straightforward. Backup. Medium safe. No backup : intermediate files generated during pipelines execution or big amount of data re-downloadable. Low safe. Datasafe : datasets generated by us or from collaborators, not in public repositories. Snapshots. High safe. If you want to create a new folder inside one of the previously mentioned, perform the following instructions: Go to the bbgdashboard Log in (or check that you are already logged in) Go to the Cluster tab. Click on one of the four options where you want to create your folder. Write the title and a description of the new folder and click \"OK\".","title":"Description"},{"location":"Cluster_basics/NewFolders/#possible-errors","text":"If after clicking the \"OK\" button an ERROR message is displayed: Make sure that you are logged in in the dashboard itself. Try doing everything from an incognito window .","title":"Possible errors"},{"location":"Cluster_basics/NewFolders/#reference","text":"Carlos L\u00f3pez Elorduy Miguel Grau Jordi Deu-Pons","title":"Reference"},{"location":"Cluster_basics/Notebooks_in_cluster/","text":"Running notebooks in the cluster \u00b6 Description \u00b6 Running a jupyter notebook in the cluster allows you to work with a notebook which will be running even if you disconnect from the cluster . This is especially useful for time-consuming/memory-consuming processes or notebooks with a high number of variables/packages needed, so that you have more computational power than your local computer, you can leave them running in the background without the fear of accidentally disconnecting and losing all the progress and you can come back to a notebook without the need of loading all the variables/packages again. To run a notebook in the cluster, a screen and an interactive will be used. Usage \u00b6 You will need to follow the next steps: Connect to the cluster: ssh -p 22022 <username>@bbgcluster Open a screen: <username>@login01:~$ screen -S <screen_name> Run an interactive job: [ screen_name ] <username>@login01:~$ interactive Note If your notebook needs more than 8G and 2 cores, you can specify it here -- see interactive section. Activate conda base or the conda environment that you need in your notebook: [ screen_name ] <username>@bbgn005:~$ conda activate Go to the folder that you wish to run the notebook: ( base )[ screen_name ] <username>@bbgn005:~$ cd /workspace/folder Run the jupyter notebook: ( base )[ screen_name ] <username>@bbgn005:~/workspace/folder$ unset XDG_RUNTIME_DIR && jupyter notebook --ip = 0 .0.0.0 Keep the URL with the token and the node in which the interactive is running: [ I 10 :37:20.371 NotebookApp ] The Jupyter Notebook is running at: http://127.0.0.1:8888/?token = 730ea7a95c02207c9fb7cbd434c2de81e03168845d42c23c Now, your notebook is running and you can dettach from the screen: Ctrl + A -> D Open a new terminal and create an ssh tunnel to be able to access the port 8888 in the node -- following the example, this is node bbgn005 : ssh -L 8888 :bbgn005:8888 -p 22022 <username>@bbgcluster Now use the URL, replacing 127.0.0.1 with localhost and open the URL in your browser: http://localhost:8888/?token=730ea7a95c02207c9fb7cbd434c2de81e03168845d42c23c Using the tunnel (ssh -L terminal) and the URL in the browser, you can enter the notebook as many times as you need. When you don't need the notebook to continue running in the cluster, reconnect to the screen: screen -r <screen_name> And kill jupyter and exit the interactive session. Reference \u00b6 Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Ferran Mui\u00f1os Paula Gomis","title":"Running notebooks in the cluster"},{"location":"Cluster_basics/Notebooks_in_cluster/#running-notebooks-in-the-cluster","text":"","title":"Running notebooks in the cluster"},{"location":"Cluster_basics/Notebooks_in_cluster/#description","text":"Running a jupyter notebook in the cluster allows you to work with a notebook which will be running even if you disconnect from the cluster . This is especially useful for time-consuming/memory-consuming processes or notebooks with a high number of variables/packages needed, so that you have more computational power than your local computer, you can leave them running in the background without the fear of accidentally disconnecting and losing all the progress and you can come back to a notebook without the need of loading all the variables/packages again. To run a notebook in the cluster, a screen and an interactive will be used.","title":"Description"},{"location":"Cluster_basics/Notebooks_in_cluster/#usage","text":"You will need to follow the next steps: Connect to the cluster: ssh -p 22022 <username>@bbgcluster Open a screen: <username>@login01:~$ screen -S <screen_name> Run an interactive job: [ screen_name ] <username>@login01:~$ interactive Note If your notebook needs more than 8G and 2 cores, you can specify it here -- see interactive section. Activate conda base or the conda environment that you need in your notebook: [ screen_name ] <username>@bbgn005:~$ conda activate Go to the folder that you wish to run the notebook: ( base )[ screen_name ] <username>@bbgn005:~$ cd /workspace/folder Run the jupyter notebook: ( base )[ screen_name ] <username>@bbgn005:~/workspace/folder$ unset XDG_RUNTIME_DIR && jupyter notebook --ip = 0 .0.0.0 Keep the URL with the token and the node in which the interactive is running: [ I 10 :37:20.371 NotebookApp ] The Jupyter Notebook is running at: http://127.0.0.1:8888/?token = 730ea7a95c02207c9fb7cbd434c2de81e03168845d42c23c Now, your notebook is running and you can dettach from the screen: Ctrl + A -> D Open a new terminal and create an ssh tunnel to be able to access the port 8888 in the node -- following the example, this is node bbgn005 : ssh -L 8888 :bbgn005:8888 -p 22022 <username>@bbgcluster Now use the URL, replacing 127.0.0.1 with localhost and open the URL in your browser: http://localhost:8888/?token=730ea7a95c02207c9fb7cbd434c2de81e03168845d42c23c Using the tunnel (ssh -L terminal) and the URL in the browser, you can enter the notebook as many times as you need. When you don't need the notebook to continue running in the cluster, reconnect to the screen: screen -r <screen_name> And kill jupyter and exit the interactive session.","title":"Usage"},{"location":"Cluster_basics/Notebooks_in_cluster/#reference","text":"Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Ferran Mui\u00f1os Paula Gomis","title":"Reference"},{"location":"Cluster_basics/Screen/","text":"Screen \u00b6 Description \u00b6 The screen command opens a session which will be running even if you disconnect from the cluster . This is especially useful for time-consuming processes, so that you can leave them running in the background without the fear of accidentally disconnecting and losing all the progress. You can also open several screens for different processes, which you can detach and attach to them as you like. Basic commands \u00b6 New screen \u00b6 Creates a new screen with name \" custom_name \". screen -S <custom_name> Warning When opening a new screen, this should be done from the login01 node, since this guarantees that the screen will be constantly running and not shut down (which could happen if the screen is opened in one of the other nodes). List screens \u00b6 List all the created screens. screen -ls Detach \u00b6 Detaches from a screen Ctrl + A -> D Re-attach \u00b6 Re-attaches to a detached screen. screen -r [ #] Note If there are multiple screens available, include the number of the screen id (or name ) to identify which screen to re-attach. Exit and kill screen \u00b6 exit Kill a detached screen \u00b6 screen -X -S [ screen number ID or name ] quit Kill all screens \u00b6 pkill screen Documentation \u00b6 For a more extensive list of commands, check the screen cheatsheet . You can also check the full documentation . Reference \u00b6 Carlos L\u00f3pez Elorduy Jordi Deu-Pons Miguel Grau","title":"Screen"},{"location":"Cluster_basics/Screen/#screen","text":"","title":"Screen"},{"location":"Cluster_basics/Screen/#description","text":"The screen command opens a session which will be running even if you disconnect from the cluster . This is especially useful for time-consuming processes, so that you can leave them running in the background without the fear of accidentally disconnecting and losing all the progress. You can also open several screens for different processes, which you can detach and attach to them as you like.","title":"Description"},{"location":"Cluster_basics/Screen/#basic-commands","text":"","title":"Basic commands"},{"location":"Cluster_basics/Screen/#new-screen","text":"Creates a new screen with name \" custom_name \". screen -S <custom_name> Warning When opening a new screen, this should be done from the login01 node, since this guarantees that the screen will be constantly running and not shut down (which could happen if the screen is opened in one of the other nodes).","title":"New screen"},{"location":"Cluster_basics/Screen/#list-screens","text":"List all the created screens. screen -ls","title":"List screens"},{"location":"Cluster_basics/Screen/#detach","text":"Detaches from a screen Ctrl + A -> D","title":"Detach"},{"location":"Cluster_basics/Screen/#re-attach","text":"Re-attaches to a detached screen. screen -r [ #] Note If there are multiple screens available, include the number of the screen id (or name ) to identify which screen to re-attach.","title":"Re-attach"},{"location":"Cluster_basics/Screen/#exit-and-kill-screen","text":"exit","title":"Exit and kill screen"},{"location":"Cluster_basics/Screen/#kill-a-detached-screen","text":"screen -X -S [ screen number ID or name ] quit","title":"Kill a detached screen"},{"location":"Cluster_basics/Screen/#kill-all-screens","text":"pkill screen","title":"Kill all screens"},{"location":"Cluster_basics/Screen/#documentation","text":"For a more extensive list of commands, check the screen cheatsheet . You can also check the full documentation .","title":"Documentation"},{"location":"Cluster_basics/Screen/#reference","text":"Carlos L\u00f3pez Elorduy Jordi Deu-Pons Miguel Grau","title":"Reference"},{"location":"Cluster_basics/Structure/","text":"Structure \u00b6 Description \u00b6 The workspace is organized in several folders, each of them with different purposes and different security backups. Projects : Files from analysis or results obtained in the projects. It has backups and snapshots so it is highly safe. Datasets : Data files that have been downloaded from public or private repositories and re-downloading the is possible or straightforward. It only has backups, so it is medium safe. No backup : Intermediate files that have been generated during pipelines execution or big amounts of data that is re-downloadable. It is lowly safe. Datasafe : Datasets that have been generated by us or from collaborators, and it is not in public repositories. It has Snapshots and it is highly safe. Reference \u00b6 Jordi Deu-Pons Miguel Grau","title":"Structure"},{"location":"Cluster_basics/Structure/#structure","text":"","title":"Structure"},{"location":"Cluster_basics/Structure/#description","text":"The workspace is organized in several folders, each of them with different purposes and different security backups. Projects : Files from analysis or results obtained in the projects. It has backups and snapshots so it is highly safe. Datasets : Data files that have been downloaded from public or private repositories and re-downloading the is possible or straightforward. It only has backups, so it is medium safe. No backup : Intermediate files that have been generated during pipelines execution or big amounts of data that is re-downloadable. It is lowly safe. Datasafe : Datasets that have been generated by us or from collaborators, and it is not in public repositories. It has Snapshots and it is highly safe.","title":"Description"},{"location":"Cluster_basics/Structure/#reference","text":"Jordi Deu-Pons Miguel Grau","title":"Reference"},{"location":"Cluster_basics/Submitting_jobs/Qmap/","text":"Qmap Submit \u00b6 Description \u00b6 How to submit jobs to the Cluster using Qmap . Qmap documentation: https://qmap.readthedocs.io Howto \u00b6 1. Prepare .qmap file (example) \u00b6 [ params ] memory = 50G [ pre ] . \"/home/ $USER /miniconda3/etc/profile.d/conda.sh\" conda activate sciclone-env [ jobs ] Rscript run.R ../data/vafs.dat bmm 3 ./results.beta.3 Rscript run.R ../data/vafs.dat gaussian.bmm 3 ./results.gaussian.3 Rscript run.R ../data/vafs.dat binomial.bmm 3 ./results.binomial.3 2. Run \"qmap submit\" from the login node \u00b6 $ qmap submit filename.qmap Reference \u00b6 Jordi Deu-Pons Miguel Grau","title":"Qmap Submit"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#qmap-submit","text":"","title":"Qmap Submit"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#description","text":"How to submit jobs to the Cluster using Qmap . Qmap documentation: https://qmap.readthedocs.io","title":"Description"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#howto","text":"","title":"Howto"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#1-prepare-qmap-file-example","text":"[ params ] memory = 50G [ pre ] . \"/home/ $USER /miniconda3/etc/profile.d/conda.sh\" conda activate sciclone-env [ jobs ] Rscript run.R ../data/vafs.dat bmm 3 ./results.beta.3 Rscript run.R ../data/vafs.dat gaussian.bmm 3 ./results.gaussian.3 Rscript run.R ../data/vafs.dat binomial.bmm 3 ./results.binomial.3","title":"1. Prepare .qmap file (example)"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#2-run-qmap-submit-from-the-login-node","text":"$ qmap submit filename.qmap","title":"2. Run \"qmap submit\" from the login node"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#reference","text":"Jordi Deu-Pons Miguel Grau","title":"Reference"},{"location":"Cluster_basics/Submitting_jobs/SLURM/","text":"SLURM \u00b6 Description \u00b6 Reference \u00b6","title":"SLURM"},{"location":"Cluster_basics/Submitting_jobs/SLURM/#slurm","text":"","title":"SLURM"},{"location":"Cluster_basics/Submitting_jobs/SLURM/#description","text":"","title":"Description"},{"location":"Cluster_basics/Submitting_jobs/SLURM/#reference","text":"","title":"Reference"},{"location":"Datasets/General_datasets/BeatAML/","text":"BeatAML \u00b6 Description \u00b6 Reference \u00b6","title":"BeatAML"},{"location":"Datasets/General_datasets/BeatAML/#beataml","text":"","title":"BeatAML"},{"location":"Datasets/General_datasets/BeatAML/#description","text":"","title":"Description"},{"location":"Datasets/General_datasets/BeatAML/#reference","text":"","title":"Reference"},{"location":"Datasets/General_datasets/CGCI/","text":"CGCI \u00b6 Description \u00b6 Reference \u00b6","title":"CGCI"},{"location":"Datasets/General_datasets/CGCI/#cgci","text":"","title":"CGCI"},{"location":"Datasets/General_datasets/CGCI/#description","text":"","title":"Description"},{"location":"Datasets/General_datasets/CGCI/#reference","text":"","title":"Reference"},{"location":"Datasets/General_datasets/CPTAC/","text":"CPTAC \u00b6 Description \u00b6 Data access \u00b6 Website Citing in Publications and Presentations \u00b6 Reference \u00b6 Paula Gomis Monica Sanchez","title":"CPTAC"},{"location":"Datasets/General_datasets/CPTAC/#cptac","text":"","title":"CPTAC"},{"location":"Datasets/General_datasets/CPTAC/#description","text":"","title":"Description"},{"location":"Datasets/General_datasets/CPTAC/#data-access","text":"Website","title":"Data access"},{"location":"Datasets/General_datasets/CPTAC/#citing-in-publications-and-presentations","text":"","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/CPTAC/#reference","text":"Paula Gomis Monica Sanchez","title":"Reference"},{"location":"Datasets/General_datasets/GENIE/","text":"GENIE \u00b6 Description \u00b6 Reference \u00b6","title":"GENIE"},{"location":"Datasets/General_datasets/GENIE/#genie","text":"","title":"GENIE"},{"location":"Datasets/General_datasets/GENIE/#description","text":"","title":"Description"},{"location":"Datasets/General_datasets/GENIE/#reference","text":"","title":"Reference"},{"location":"Datasets/General_datasets/Hartwig/","text":"Hartwig \u00b6 Description \u00b6 Hartwig Medical Database stores the genetic and clinical data of thousands of patients in the Netherlands with metastatic cancer. The genetic data are generated using OncoAct. It is the largest database of metastatic tumor data obtained with WGS in the world, including WGS data of over 5000 patients. It combines genetic data with treatment and treatment outcome data. Data access \u00b6 You can find the data from Hartwig Medical Foundation Database in the folder: /workspace/datasets/hartwig You can find clinical data from the patients in Hartwig in the following file: /workspace/datasets/hartwig/20220809/biomarkers/tmp/clinical_ready.csv A more complete version of the previous table can be found in: /workspace/datasets/hartwig/20220809/biomarkers/clean/biomarkers_AdjTPM.csv Permission To use data from Hartwig Medical Foundation Database you need special permission. Contact Martina or Paula if you need to use this data. Website https://www.hartwigmedicalfoundation.nl/en/data/database/ Citing in Publications and Presentations \u00b6 Researchers making use of data provided by Hartwig Medical Foundation must acknowledge this in every publication, by using at least the text below: This publication and the underlying research are partly facilitated by Hartwig Medical Foundation and the Center for Personalized Cancer Treatment (CPCT) which have generated, analysed and made available data for this research. Read this document to learn more about how to cite Hartwig Medical Foundation Database. Reference \u00b6 Paula Gomis Monica Sanchez Joseph USSET","title":"Hartwig"},{"location":"Datasets/General_datasets/Hartwig/#hartwig","text":"","title":"Hartwig"},{"location":"Datasets/General_datasets/Hartwig/#description","text":"Hartwig Medical Database stores the genetic and clinical data of thousands of patients in the Netherlands with metastatic cancer. The genetic data are generated using OncoAct. It is the largest database of metastatic tumor data obtained with WGS in the world, including WGS data of over 5000 patients. It combines genetic data with treatment and treatment outcome data.","title":"Description"},{"location":"Datasets/General_datasets/Hartwig/#data-access","text":"You can find the data from Hartwig Medical Foundation Database in the folder: /workspace/datasets/hartwig You can find clinical data from the patients in Hartwig in the following file: /workspace/datasets/hartwig/20220809/biomarkers/tmp/clinical_ready.csv A more complete version of the previous table can be found in: /workspace/datasets/hartwig/20220809/biomarkers/clean/biomarkers_AdjTPM.csv Permission To use data from Hartwig Medical Foundation Database you need special permission. Contact Martina or Paula if you need to use this data. Website https://www.hartwigmedicalfoundation.nl/en/data/database/","title":"Data access"},{"location":"Datasets/General_datasets/Hartwig/#citing-in-publications-and-presentations","text":"Researchers making use of data provided by Hartwig Medical Foundation must acknowledge this in every publication, by using at least the text below: This publication and the underlying research are partly facilitated by Hartwig Medical Foundation and the Center for Personalized Cancer Treatment (CPCT) which have generated, analysed and made available data for this research. Read this document to learn more about how to cite Hartwig Medical Foundation Database.","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/Hartwig/#reference","text":"Paula Gomis Monica Sanchez Joseph USSET","title":"Reference"},{"location":"Datasets/General_datasets/ICGC/","text":"ICGC \u00b6 Description \u00b6 The International Cancer Genome Consortium (ICGC) is a global initiative to build a comprehensive catalog of mutational abnormalities in the major tumor types. ICGC\u2019s Data Portal is a user-friendly platform for efficient visualization, analysis and interpretation of large, diverse cancer datasets. The portal currently contains data from 84 worldwide cancer projects, collectively representing about 77 million somatic mutations and molecular data from over 20,000 contributors. The ICGC Data Portal provides many tools for visualizing, querying, and downloading cancer data, which is released on a quarterly schedule. Data access \u00b6 You can find the data from ICGC in the folder: Website https://dcc.icgc.org Citing in Publications and Presentations \u00b6 To cite the ICGC 25K Data Portal, please cite this publication: Zhang J, Bajari R, Andric D, et al. The International Cancer Genome Consortium Data Portal. Nat Biotechnol. 2019;37(4):367\u2010369. doi:10.1038/s41587-019-0055-9 Reference \u00b6 Paula Gomis Monica Sanchez","title":"ICGC"},{"location":"Datasets/General_datasets/ICGC/#icgc","text":"","title":"ICGC"},{"location":"Datasets/General_datasets/ICGC/#description","text":"The International Cancer Genome Consortium (ICGC) is a global initiative to build a comprehensive catalog of mutational abnormalities in the major tumor types. ICGC\u2019s Data Portal is a user-friendly platform for efficient visualization, analysis and interpretation of large, diverse cancer datasets. The portal currently contains data from 84 worldwide cancer projects, collectively representing about 77 million somatic mutations and molecular data from over 20,000 contributors. The ICGC Data Portal provides many tools for visualizing, querying, and downloading cancer data, which is released on a quarterly schedule.","title":"Description"},{"location":"Datasets/General_datasets/ICGC/#data-access","text":"You can find the data from ICGC in the folder: Website https://dcc.icgc.org","title":"Data access"},{"location":"Datasets/General_datasets/ICGC/#citing-in-publications-and-presentations","text":"To cite the ICGC 25K Data Portal, please cite this publication: Zhang J, Bajari R, Andric D, et al. The International Cancer Genome Consortium Data Portal. Nat Biotechnol. 2019;37(4):367\u2010369. doi:10.1038/s41587-019-0055-9","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/ICGC/#reference","text":"Paula Gomis Monica Sanchez","title":"Reference"},{"location":"Datasets/General_datasets/PCAWG/","text":"PCAWG \u00b6 Description \u00b6 The Pan-Cancer Analysis of Whole Genomes (PCAWG) study is an international collaboration to identify common patterns of mutation in more than 2,600 cancer whole genomes from the International Cancer Genome Consortium. Building upon previous work which examined cancer coding regions (Cancer Genome Atlas Research Network, The Cancer Genome Atlas Pan-Cancer analysis project), this project explored the nature and consequences of somatic and germline variations in both coding and non-coding regions, with specific emphasis on cis-regulatory sites, non-coding RNAs, and large-scale structural alterations. Data access \u00b6 You can find the data from PCAWG in the folder: /workspace/datasets/intogen_datasets/genomes/pcawg_20160110/filtered You can find clinical data from samples from PCAWG in the file: /workspace/datasets/intogen_datasets/genomes/pcawg_20160110/original_data/pcawg_donor_clinical_August2016_v9.csv You can find clinical data from samples from Hartwig in the file: /workspace/datasets/intogen_datasets/genomes/pcawg_20160110/original_data/pcawg_specimen_histology_August2016_v9.csv Additional data about ... from PCAWG is available in the folder (you will need special permission to use this data): /workspace/datasets/pcawg Website https://dcc.icgc.org/pcawg Citing in Publications and Presentations \u00b6 When using this dataset, please cite reference: The ICGC/TCGA Pan-Cancer Analysis of Whole Genomes Network. Pan-cancer analysis of whole genomes. Nature (2020). Click here to learn more about how to cite PCAWG. Reference \u00b6 Paula Gomis Monica Sanchez","title":"PCAWG"},{"location":"Datasets/General_datasets/PCAWG/#pcawg","text":"","title":"PCAWG"},{"location":"Datasets/General_datasets/PCAWG/#description","text":"The Pan-Cancer Analysis of Whole Genomes (PCAWG) study is an international collaboration to identify common patterns of mutation in more than 2,600 cancer whole genomes from the International Cancer Genome Consortium. Building upon previous work which examined cancer coding regions (Cancer Genome Atlas Research Network, The Cancer Genome Atlas Pan-Cancer analysis project), this project explored the nature and consequences of somatic and germline variations in both coding and non-coding regions, with specific emphasis on cis-regulatory sites, non-coding RNAs, and large-scale structural alterations.","title":"Description"},{"location":"Datasets/General_datasets/PCAWG/#data-access","text":"You can find the data from PCAWG in the folder: /workspace/datasets/intogen_datasets/genomes/pcawg_20160110/filtered You can find clinical data from samples from PCAWG in the file: /workspace/datasets/intogen_datasets/genomes/pcawg_20160110/original_data/pcawg_donor_clinical_August2016_v9.csv You can find clinical data from samples from Hartwig in the file: /workspace/datasets/intogen_datasets/genomes/pcawg_20160110/original_data/pcawg_specimen_histology_August2016_v9.csv Additional data about ... from PCAWG is available in the folder (you will need special permission to use this data): /workspace/datasets/pcawg Website https://dcc.icgc.org/pcawg","title":"Data access"},{"location":"Datasets/General_datasets/PCAWG/#citing-in-publications-and-presentations","text":"When using this dataset, please cite reference: The ICGC/TCGA Pan-Cancer Analysis of Whole Genomes Network. Pan-cancer analysis of whole genomes. Nature (2020). Click here to learn more about how to cite PCAWG.","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/PCAWG/#reference","text":"Paula Gomis Monica Sanchez","title":"Reference"},{"location":"Datasets/General_datasets/PedcBioPortal/","text":"PedcBioPortal \u00b6 Description \u00b6 The PedcBioPortal for Childhood Cancer Genomics is an instance of cBioPortal supporting the curation and pan-cancer integration of public, pediatric cancer genomics data sets as well as 'open science' initiatives integrated within the Kids First Data Resource Center as well as data from consortia-based efforts including the Children's Brain Tumor Tissue Consortium (CBTTC), the Pediatric NeuroOncology Consortium (PNOC), the St. Baldrick Pediatric Stand Up 2 Cancer Dream Team, and the Pediatric Preclinical Testing Consortium (PPTC). Data access \u00b6 Website Citing in Publications and Presentations \u00b6 Reference \u00b6 Paula Gomis Monica Sanchez","title":"PedcBioPortal"},{"location":"Datasets/General_datasets/PedcBioPortal/#pedcbioportal","text":"","title":"PedcBioPortal"},{"location":"Datasets/General_datasets/PedcBioPortal/#description","text":"The PedcBioPortal for Childhood Cancer Genomics is an instance of cBioPortal supporting the curation and pan-cancer integration of public, pediatric cancer genomics data sets as well as 'open science' initiatives integrated within the Kids First Data Resource Center as well as data from consortia-based efforts including the Children's Brain Tumor Tissue Consortium (CBTTC), the Pediatric NeuroOncology Consortium (PNOC), the St. Baldrick Pediatric Stand Up 2 Cancer Dream Team, and the Pediatric Preclinical Testing Consortium (PPTC).","title":"Description"},{"location":"Datasets/General_datasets/PedcBioPortal/#data-access","text":"Website","title":"Data access"},{"location":"Datasets/General_datasets/PedcBioPortal/#citing-in-publications-and-presentations","text":"","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/PedcBioPortal/#reference","text":"Paula Gomis Monica Sanchez","title":"Reference"},{"location":"Datasets/General_datasets/StJude/","text":"St. Jude \u00b6 Description \u00b6 In 2010, St. Jude Children\u2019s Research Hospital and Washington University School of Medicine launched a $65 million, three-year project (St. Jude\u2014Washington University Pediatric Cancer Genome Project) to define the genomic landscape of pediatric cancer, including some of the least understood and most challenging cancers, as an effort to discover the origins of pediatric cancer and seek new treatments. It included whole exome and whole transcriptome sequencing of an additional 1,200 patients, which included more than 20 different cancers. Click here to visualize the list of tumor types available in St. Jude Cloud. Data access \u00b6 You can find the data from St. Jude Cloud in the folder: /workspace/datasets/stjude Permission To use data from St. Jude you need special permission. Contact Martina or Paula if you need to use this data. Website https://www.stjude.cloud/studies/pediatric-cancer-genome-project/ Citing in Publications and Presentations \u00b6 Click here to learn how to cite St. Jude data. Reference \u00b6 Paula Gomis","title":"St. Jude"},{"location":"Datasets/General_datasets/StJude/#st-jude","text":"","title":"St. Jude"},{"location":"Datasets/General_datasets/StJude/#description","text":"In 2010, St. Jude Children\u2019s Research Hospital and Washington University School of Medicine launched a $65 million, three-year project (St. Jude\u2014Washington University Pediatric Cancer Genome Project) to define the genomic landscape of pediatric cancer, including some of the least understood and most challenging cancers, as an effort to discover the origins of pediatric cancer and seek new treatments. It included whole exome and whole transcriptome sequencing of an additional 1,200 patients, which included more than 20 different cancers. Click here to visualize the list of tumor types available in St. Jude Cloud.","title":"Description"},{"location":"Datasets/General_datasets/StJude/#data-access","text":"You can find the data from St. Jude Cloud in the folder: /workspace/datasets/stjude Permission To use data from St. Jude you need special permission. Contact Martina or Paula if you need to use this data. Website https://www.stjude.cloud/studies/pediatric-cancer-genome-project/","title":"Data access"},{"location":"Datasets/General_datasets/StJude/#citing-in-publications-and-presentations","text":"Click here to learn how to cite St. Jude data.","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/StJude/#reference","text":"Paula Gomis","title":"Reference"},{"location":"Datasets/General_datasets/StJudeLife/","text":"St. Jude LIFE \u00b6 Description \u00b6 The objective of the St. Jude LIFE study is to establish a lifetime cohort of childhood cancer survivors to facilitate longitudinal clinical evaluation of health outcomes in aging adults surviving pediatric cancer. The main aims of the project are: determine prevalence and latency of late effects; identify multifactorial predictors of adverse outcomes; develop risk profiles for adverse health outcomes across the age spectrum; use data to guide health screening and risk-reducing interventions. Click here to visualize a complete report of the characteristics of the cohort from St. Jude LIFE. Data access \u00b6 You can find the data from St. Jude LIFE in the folder: /workspace/datasets/stjudelife Website https://sjlife.stjude.org/ Citing in Publications and Presentations \u00b6 Reference \u00b6 Paula Gomis","title":"St. Jude LIFE"},{"location":"Datasets/General_datasets/StJudeLife/#st-jude-life","text":"","title":"St. Jude LIFE"},{"location":"Datasets/General_datasets/StJudeLife/#description","text":"The objective of the St. Jude LIFE study is to establish a lifetime cohort of childhood cancer survivors to facilitate longitudinal clinical evaluation of health outcomes in aging adults surviving pediatric cancer. The main aims of the project are: determine prevalence and latency of late effects; identify multifactorial predictors of adverse outcomes; develop risk profiles for adverse health outcomes across the age spectrum; use data to guide health screening and risk-reducing interventions. Click here to visualize a complete report of the characteristics of the cohort from St. Jude LIFE.","title":"Description"},{"location":"Datasets/General_datasets/StJudeLife/#data-access","text":"You can find the data from St. Jude LIFE in the folder: /workspace/datasets/stjudelife Website https://sjlife.stjude.org/","title":"Data access"},{"location":"Datasets/General_datasets/StJudeLife/#citing-in-publications-and-presentations","text":"","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/StJudeLife/#reference","text":"Paula Gomis","title":"Reference"},{"location":"Datasets/General_datasets/TARGET/","text":"TARGET \u00b6 Description \u00b6 The Therapeutically Applicable Research to Generate Effective Treatments (TARGET) program applies a comprehensive genomic approach to determine molecular changes that drive childhood cancers. The goal of the program is to use data to guide the development of effective, less toxic therapies. Data access \u00b6 You can find TARGET pediatric cancer data in the folder: Website https://ocg.cancer.gov/programs/target Citing in Publications and Presentations \u00b6 Researchers making use of TARGET pediatric cancer data must acknowledge this in every publication, by using at least the text below: \"The results published here are in whole or part based upon data generated by the Therapeutically Applicable Research to Generate Effective Treatments (https://ocg.cancer.gov/programs/target) initiative, phs000218. The data used for this analysis are available at https://portal.gdc.cancer.gov/projects. Information about TARGET can be found at http://ocg.cancer.gov/programs/target.\" Click here to learn more about how to cite TARGET pediatric cancer data. Reference \u00b6 Paula Gomis","title":"TARGET"},{"location":"Datasets/General_datasets/TARGET/#target","text":"","title":"TARGET"},{"location":"Datasets/General_datasets/TARGET/#description","text":"The Therapeutically Applicable Research to Generate Effective Treatments (TARGET) program applies a comprehensive genomic approach to determine molecular changes that drive childhood cancers. The goal of the program is to use data to guide the development of effective, less toxic therapies.","title":"Description"},{"location":"Datasets/General_datasets/TARGET/#data-access","text":"You can find TARGET pediatric cancer data in the folder: Website https://ocg.cancer.gov/programs/target","title":"Data access"},{"location":"Datasets/General_datasets/TARGET/#citing-in-publications-and-presentations","text":"Researchers making use of TARGET pediatric cancer data must acknowledge this in every publication, by using at least the text below: \"The results published here are in whole or part based upon data generated by the Therapeutically Applicable Research to Generate Effective Treatments (https://ocg.cancer.gov/programs/target) initiative, phs000218. The data used for this analysis are available at https://portal.gdc.cancer.gov/projects. Information about TARGET can be found at http://ocg.cancer.gov/programs/target.\" Click here to learn more about how to cite TARGET pediatric cancer data.","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/TARGET/#reference","text":"Paula Gomis","title":"Reference"},{"location":"Datasets/General_datasets/TCGA/","text":"TCGA \u00b6 Description \u00b6 The Cancer Genome Atlas (TCGA), a landmark cancer genomics program, molecularly characterized over 20,000 primary cancer and matched normal samples spanning 33 cancer types. This joint effort between NCI and the National Human Genome Research Institute began in 2006, bringing together researchers from diverse disciplines and multiple institutions. TCGA has generated over 2.5 petabytes of genomic, epigenomic, transcriptomic, and proteomic data. The data, which has already led to improvements in our ability to diagnose, treat, and prevent cancer, will remain publicly available for anyone in the research community to use. Click here to visualize the list of tumor types available in TCGA. For each cancer type, TCGA published an overview of the characterizations performed and an initial analysis of the data. Data access \u00b6 You can find the data from TCGA in the folder: /workspace/datasets/intogen_datasets/genomes/tcga_20171006/filtered You can find clinical data from samples from TCGA in the folder: /workspace/datasets/intogen_datasets/genomes/tcga_20171006/metadata Website https://www.cancer.gov/about-nci/organization/ccg/research/structural-genomics/tcga Citing in Publications and Presentations \u00b6 Click here to learn how to cite TCGA. Reference \u00b6 Paula Gomis Monica Sanchez","title":"TCGA"},{"location":"Datasets/General_datasets/TCGA/#tcga","text":"","title":"TCGA"},{"location":"Datasets/General_datasets/TCGA/#description","text":"The Cancer Genome Atlas (TCGA), a landmark cancer genomics program, molecularly characterized over 20,000 primary cancer and matched normal samples spanning 33 cancer types. This joint effort between NCI and the National Human Genome Research Institute began in 2006, bringing together researchers from diverse disciplines and multiple institutions. TCGA has generated over 2.5 petabytes of genomic, epigenomic, transcriptomic, and proteomic data. The data, which has already led to improvements in our ability to diagnose, treat, and prevent cancer, will remain publicly available for anyone in the research community to use. Click here to visualize the list of tumor types available in TCGA. For each cancer type, TCGA published an overview of the characterizations performed and an initial analysis of the data.","title":"Description"},{"location":"Datasets/General_datasets/TCGA/#data-access","text":"You can find the data from TCGA in the folder: /workspace/datasets/intogen_datasets/genomes/tcga_20171006/filtered You can find clinical data from samples from TCGA in the folder: /workspace/datasets/intogen_datasets/genomes/tcga_20171006/metadata Website https://www.cancer.gov/about-nci/organization/ccg/research/structural-genomics/tcga","title":"Data access"},{"location":"Datasets/General_datasets/TCGA/#citing-in-publications-and-presentations","text":"Click here to learn how to cite TCGA.","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/TCGA/#reference","text":"Paula Gomis Monica Sanchez","title":"Reference"},{"location":"Datasets/General_datasets/UK_Biobank/","text":"UK Biobank \u00b6 Description \u00b6 UK Biobank is a large-scale biomedical database and research resource, containing in-depth genetic and health information from half a million UK participants. It is a very large and detailed prospective study with over 500,000 participants aged 40\u201369 years when recruited in 2006\u20132010. The study has collected and continues to collect extensive phenotypic and genotypic detail about its participants, including data from questionnaires, physical measures, sample assays, accelerometry, multimodal imaging, genome-wide genotyping and longitudinal follow-up for a wide range of health-related outcomes. It is accessible to approved researchers undertaking vital research into the most common and life-threatening diseases. Data access \u00b6 Website https://www.ukbiobank.ac.uk/ Reference \u00b6 Paula Gomis Santi Demajo","title":"UK Biobank"},{"location":"Datasets/General_datasets/UK_Biobank/#uk-biobank","text":"","title":"UK Biobank"},{"location":"Datasets/General_datasets/UK_Biobank/#description","text":"UK Biobank is a large-scale biomedical database and research resource, containing in-depth genetic and health information from half a million UK participants. It is a very large and detailed prospective study with over 500,000 participants aged 40\u201369 years when recruited in 2006\u20132010. The study has collected and continues to collect extensive phenotypic and genotypic detail about its participants, including data from questionnaires, physical measures, sample assays, accelerometry, multimodal imaging, genome-wide genotyping and longitudinal follow-up for a wide range of health-related outcomes. It is accessible to approved researchers undertaking vital research into the most common and life-threatening diseases.","title":"Description"},{"location":"Datasets/General_datasets/UK_Biobank/#data-access","text":"Website https://www.ukbiobank.ac.uk/","title":"Data access"},{"location":"Datasets/General_datasets/UK_Biobank/#reference","text":"Paula Gomis Santi Demajo","title":"Reference"},{"location":"Datasets/General_datasets/cBioPortal/","text":"cBioPortal \u00b6 Description \u00b6 The cBioPortal for Cancer Genomics is an open-access, open-source resource for interactive exploration of multidimensional cancer genomics data sets including molecular profiles and clinical attributes from large-scale cancer genomics projects. The portal supports and stores non-synonymous mutations, DNA copy-number data (putative, discrete values per gene, e.g. \"deeply deleted\" or \"amplified\", as well as log2 or linear copy number data), mRNA and microRNA expression data, protein-level and phosphoprotein level data (RPPA or mass spectrometry based), DNA methylation data, and de-identified clinical data. However, for many studies only somatic mutation data and limited clinical data are available. For TCGA studies, the other data types are also available. Germline mutations are supported by cBioPortal, but are, with a few exceptions, not available in the public instance. Data access \u00b6 Click here to visualize the list of all the available datasets in cBioPortal and download the data. Website https://www.cbioportal.org/ Citing in Publications and Presentations \u00b6 When using data from cBioPortal, please cite the following portal papers: Cerami et al. The cBio Cancer Genomics Portal: An Open Platform for Exploring Multidimensional Cancer Genomics Data. Cancer Discovery. May 2012 2; 401. PubMed. Gao et al. Integrative analysis of complex cancer genomics and clinical profiles using the cBioPortal. Sci. Signal. 6, pl1 (2013). PubMed. Remember to also cite the source of the data if you are using a publicly available dataset. Click here to learn more about how to cite cBioPortal. Reference \u00b6 Paula Gomis Monica Sanchez","title":"cBioPortal"},{"location":"Datasets/General_datasets/cBioPortal/#cbioportal","text":"","title":"cBioPortal"},{"location":"Datasets/General_datasets/cBioPortal/#description","text":"The cBioPortal for Cancer Genomics is an open-access, open-source resource for interactive exploration of multidimensional cancer genomics data sets including molecular profiles and clinical attributes from large-scale cancer genomics projects. The portal supports and stores non-synonymous mutations, DNA copy-number data (putative, discrete values per gene, e.g. \"deeply deleted\" or \"amplified\", as well as log2 or linear copy number data), mRNA and microRNA expression data, protein-level and phosphoprotein level data (RPPA or mass spectrometry based), DNA methylation data, and de-identified clinical data. However, for many studies only somatic mutation data and limited clinical data are available. For TCGA studies, the other data types are also available. Germline mutations are supported by cBioPortal, but are, with a few exceptions, not available in the public instance.","title":"Description"},{"location":"Datasets/General_datasets/cBioPortal/#data-access","text":"Click here to visualize the list of all the available datasets in cBioPortal and download the data. Website https://www.cbioportal.org/","title":"Data access"},{"location":"Datasets/General_datasets/cBioPortal/#citing-in-publications-and-presentations","text":"When using data from cBioPortal, please cite the following portal papers: Cerami et al. The cBio Cancer Genomics Portal: An Open Platform for Exploring Multidimensional Cancer Genomics Data. Cancer Discovery. May 2012 2; 401. PubMed. Gao et al. Integrative analysis of complex cancer genomics and clinical profiles using the cBioPortal. Sci. Signal. 6, pl1 (2013). PubMed. Remember to also cite the source of the data if you are using a publicly available dataset. Click here to learn more about how to cite cBioPortal.","title":"Citing in Publications and Presentations"},{"location":"Datasets/General_datasets/cBioPortal/#reference","text":"Paula Gomis Monica Sanchez","title":"Reference"},{"location":"Datasets/Inhouse_datasets/ALL_cohort/","text":"ALL cohort \u00b6 Description \u00b6 Reference \u00b6","title":"ALL cohort"},{"location":"Datasets/Inhouse_datasets/ALL_cohort/#all-cohort","text":"","title":"ALL cohort"},{"location":"Datasets/Inhouse_datasets/ALL_cohort/#description","text":"","title":"Description"},{"location":"Datasets/Inhouse_datasets/ALL_cohort/#reference","text":"","title":"Reference"},{"location":"Datasets/Inhouse_datasets/Damage_maps/","text":"Damage maps \u00b6 Description \u00b6 Reference \u00b6","title":"Damage maps"},{"location":"Datasets/Inhouse_datasets/Damage_maps/#damage-maps","text":"","title":"Damage maps"},{"location":"Datasets/Inhouse_datasets/Damage_maps/#description","text":"","title":"Description"},{"location":"Datasets/Inhouse_datasets/Damage_maps/#reference","text":"","title":"Reference"},{"location":"Datasets/Inhouse_datasets/Nanopore_data/","text":"Nanopore data \u00b6 Description \u00b6 Reference \u00b6","title":"Nanopore data"},{"location":"Datasets/Inhouse_datasets/Nanopore_data/#nanopore-data","text":"","title":"Nanopore data"},{"location":"Datasets/Inhouse_datasets/Nanopore_data/#description","text":"","title":"Description"},{"location":"Datasets/Inhouse_datasets/Nanopore_data/#reference","text":"","title":"Reference"},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/","text":"Pediatric Secondary neoplasms \u00b6 Description \u00b6 Reference \u00b6","title":"Pediatric Secondary neoplasms"},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/#pediatric-secondary-neoplasms","text":"","title":"Pediatric Secondary neoplasms"},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/#description","text":"","title":"Description"},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/#reference","text":"","title":"Reference"},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/","text":"Pediatric Rhabdoid cohort \u00b6 Description \u00b6 Reference \u00b6","title":"Pediatric Rhabdoid cohort"},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/#pediatric-rhabdoid-cohort","text":"","title":"Pediatric Rhabdoid cohort"},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/#description","text":"","title":"Description"},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/#reference","text":"","title":"Reference"},{"location":"Datasets/Other_data/Canonical_transcripts/","text":"Canonical transcripts \u00b6 Description \u00b6 Reference \u00b6","title":"Canonical transcripts"},{"location":"Datasets/Other_data/Canonical_transcripts/#canonical-transcripts","text":"","title":"Canonical transcripts"},{"location":"Datasets/Other_data/Canonical_transcripts/#description","text":"","title":"Description"},{"location":"Datasets/Other_data/Canonical_transcripts/#reference","text":"","title":"Reference"},{"location":"Datasets/Other_data/Genomic_regions/","text":"Genomic regions \u00b6 Genomic regions annotations generated by BBGLab Data includes: 3utr introns mirna_mat tfbs 5utr lncrna_distal_promoters mirna_pre utr cds lncrna_exons other_ncrnas distal_promoters lncrna_proximal_promoters proximal_promoters enhancer lncrna_splice_sites splice_sites Releases \u00b6 Release 2 (30-09-2020) : The coordinates are extracted from the gtf3 annotation file. CDS coordinates are generated in two flavours: with and without (default) STOP codon. Gencode v35 Ensembl canonical transcripts v101 Release 1 (2019) : The coordinates are extracted from the gtf annotation file. CDS coordinates are generated without STOP codon. Gencode v31 Ensembl canonical transcripts v97 Description \u00b6 You can find the data in the folder: /workspace/projects/genomic_regions/ ./raw_data : contains databases from which raw data has been downloaded ./scripts : contains code to parse raw data ./hg19 : contains genomic annotations in hg19 reference genome ./hg38 : contains genomic annotations in hg38 reference genome Reference \u00b6 Joan Enric Created on 2019-07-08 by claudia.arnedo@irbbarcelona.org","title":"Genomic regions"},{"location":"Datasets/Other_data/Genomic_regions/#genomic-regions","text":"Genomic regions annotations generated by BBGLab Data includes: 3utr introns mirna_mat tfbs 5utr lncrna_distal_promoters mirna_pre utr cds lncrna_exons other_ncrnas distal_promoters lncrna_proximal_promoters proximal_promoters enhancer lncrna_splice_sites splice_sites","title":"Genomic regions"},{"location":"Datasets/Other_data/Genomic_regions/#releases","text":"Release 2 (30-09-2020) : The coordinates are extracted from the gtf3 annotation file. CDS coordinates are generated in two flavours: with and without (default) STOP codon. Gencode v35 Ensembl canonical transcripts v101 Release 1 (2019) : The coordinates are extracted from the gtf annotation file. CDS coordinates are generated without STOP codon. Gencode v31 Ensembl canonical transcripts v97","title":"Releases"},{"location":"Datasets/Other_data/Genomic_regions/#description","text":"You can find the data in the folder: /workspace/projects/genomic_regions/ ./raw_data : contains databases from which raw data has been downloaded ./scripts : contains code to parse raw data ./hg19 : contains genomic annotations in hg19 reference genome ./hg38 : contains genomic annotations in hg38 reference genome","title":"Description"},{"location":"Datasets/Other_data/Genomic_regions/#reference","text":"Joan Enric Created on 2019-07-08 by claudia.arnedo@irbbarcelona.org","title":"Reference"},{"location":"Datasets/Other_data/Nmdetective/","text":"Nmdetective \u00b6 Description \u00b6 Reference \u00b6","title":"Nmdetective"},{"location":"Datasets/Other_data/Nmdetective/#nmdetective","text":"","title":"Nmdetective"},{"location":"Datasets/Other_data/Nmdetective/#description","text":"","title":"Description"},{"location":"Datasets/Other_data/Nmdetective/#reference","text":"","title":"Reference"},{"location":"Datasets/Other_data/Reference_genomes/","text":"Reference genomes \u00b6 Description \u00b6 Reference \u00b6","title":"Reference genomes"},{"location":"Datasets/Other_data/Reference_genomes/#reference-genomes","text":"","title":"Reference genomes"},{"location":"Datasets/Other_data/Reference_genomes/#description","text":"","title":"Description"},{"location":"Datasets/Other_data/Reference_genomes/#reference","text":"","title":"Reference"},{"location":"IRB/VPN/","text":"VPN \u00b6 When working from home or outside the PCB, connecting to the VPN is neeeded in order to have access to resources such as the cluster. Linux (Ubuntu 20.04) \u00b6 1 - Install \"Openconnect\" sudo apt update sudo apt install openconnect 2 - Connect to the VPN sudo openconnect --protocol = gp vpnirb.pcb.ub.es # You can use the parameter --user to automatically enter the username. You can disconnect by just pressing Ctrl+C Full instructions \u00b6 VPN tutorial - pdf References \u00b6 Miguel Grau Carlos L\u00f3pez Elorduy","title":"VPN"},{"location":"IRB/VPN/#vpn","text":"When working from home or outside the PCB, connecting to the VPN is neeeded in order to have access to resources such as the cluster.","title":"VPN"},{"location":"IRB/VPN/#linux-ubuntu-2004","text":"1 - Install \"Openconnect\" sudo apt update sudo apt install openconnect 2 - Connect to the VPN sudo openconnect --protocol = gp vpnirb.pcb.ub.es # You can use the parameter --user to automatically enter the username. You can disconnect by just pressing Ctrl+C","title":"Linux (Ubuntu 20.04)"},{"location":"IRB/VPN/#full-instructions","text":"VPN tutorial - pdf","title":"Full instructions"},{"location":"IRB/VPN/#references","text":"Miguel Grau Carlos L\u00f3pez Elorduy","title":"References"},{"location":"IRB/eduroam/","text":"Eduroam \u00b6 Configuration \u00b6 Security: WPA & WPA2 Enterprise Authentication: Protected EAP (PEAP) Anonymous identity: Empty Check the checkbox \" No CA certificate is required \" PEAP version: Automatic Inner authentication: MSCHAPv2 Username: clusteruser@irbbarcelona.org Password: IRB password Example \u00b6 Reference \u00b6 Martina Gasull Carlos L\u00f3pez Elorduy Miguel Grau","title":"Eduroam"},{"location":"IRB/eduroam/#eduroam","text":"","title":"Eduroam"},{"location":"IRB/eduroam/#configuration","text":"Security: WPA & WPA2 Enterprise Authentication: Protected EAP (PEAP) Anonymous identity: Empty Check the checkbox \" No CA certificate is required \" PEAP version: Automatic Inner authentication: MSCHAPv2 Username: clusteruser@irbbarcelona.org Password: IRB password","title":"Configuration"},{"location":"IRB/eduroam/#example","text":"","title":"Example"},{"location":"IRB/eduroam/#reference","text":"Martina Gasull Carlos L\u00f3pez Elorduy Miguel Grau","title":"Reference"},{"location":"Plots_and_scripts/HierarchicalClustering/","text":"Hierarchical Clustering \u00b6 Python \u00b6 import numpy as np from scipy.cluster import hierarchy import matplotlib.pyplot as plt # condensed distance array ydist = np . array ([ 662. , 877. , 255. , 412. , 996. , 295. , 468. , 268. , 400. , 754. , 564. , 138. , 219. , 869. , 669. ]) # linkage object Z = hierarchy . linkage ( ydist , 'single' ) # compute and plot dendrogram dn = hierarchy . dendrogram ( Z ) Reference \u00b6 Ferran Mui\u00f1os","title":"Hierarchical Clustering"},{"location":"Plots_and_scripts/HierarchicalClustering/#hierarchical-clustering","text":"","title":"Hierarchical Clustering"},{"location":"Plots_and_scripts/HierarchicalClustering/#python","text":"import numpy as np from scipy.cluster import hierarchy import matplotlib.pyplot as plt # condensed distance array ydist = np . array ([ 662. , 877. , 255. , 412. , 996. , 295. , 468. , 268. , 400. , 754. , 564. , 138. , 219. , 869. , 669. ]) # linkage object Z = hierarchy . linkage ( ydist , 'single' ) # compute and plot dendrogram dn = hierarchy . dendrogram ( Z )","title":"Python"},{"location":"Plots_and_scripts/HierarchicalClustering/#reference","text":"Ferran Mui\u00f1os","title":"Reference"},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/","text":"Intogen-BoostDM plots \u00b6 Description \u00b6 Reference \u00b6","title":"Intogen-BoostDM plots"},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/#intogen-boostdm-plots","text":"","title":"Intogen-BoostDM plots"},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/#description","text":"","title":"Description"},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/#reference","text":"","title":"Reference"},{"location":"Plots_and_scripts/Mutational_profile/","text":"Mutational profile \u00b6 The function plot_signature will allow you to plot the mutational profile of a sample given the vector of 96 channels (see y axis in the example figure) with the frequencies of each nucleotide change. It takes as input the the vector with the mutations frequency ( profile ) and the title of the plot ( title ). The function minor_tick_labels is needed to generate the labels of the plot. Example \u00b6 Function \u00b6 import seaborn as sns import numpy as np def minor_tick_labels (): major_labels = [ 'C>A' , 'C>G' , 'C>T' , 'T>A' , 'T>C' , 'T>G' ] flanks = [ 'AA' , 'AC' , 'AG' , 'AT' , 'CA' , 'CC' , 'CG' , 'CT' , 'GA' , 'GC' , 'GG' , 'GT' , 'TA' , 'TC' , 'TG' , 'TT' ] minor_labels = [] for subs in major_labels : for flank in flanks : minor_labels . append ( flank [ 0 ] + subs [ 0 ] + flank [ 1 ]) return minor_labels def plot_signature ( profile , title = None ): \"\"\" Args: profile: 96-array in lexicographic order title: string Returns: produces the signature bar plot \"\"\" fig , ax = plt . subplots ( figsize = ( 15 , 2 )) total = np . sum ( profile ) if abs ( total - 1 ) > 0.01 : profile = profile / total sns . set ( font_scale = 1.5 ) sns . set_style ( 'white' ) # bar plot barlist = ax . bar ( range ( 96 ), profile ) color_list = [ '#72bcd4' , 'k' , 'r' , '#7e7e7e' , 'g' , '#e6add8' ] for category in range ( 6 ): for i in range ( 16 ): barlist [ category * 16 + i ] . set_color ( color_list [ category ]) ax . set_xlim ([ - 0.5 , 96 ]) ymax = np . max ( profile ) * 1.2 ax . set_ylim ( 0 , ymax ) # ax.set_ylabel('subs rel freq') labels = [ 'C>A' , 'C>G' , 'C>T' , 'T>A' , 'T>C' , 'T>G' ] major_ticks = np . arange ( 8 , 8 + 16 * 5 + 1 , 16 ) minor_ticks = np . arange ( 0.2 , 96.2 , 1 ) ax . tick_params ( length = 0 , which = 'major' , pad = 30 , labelsize = 12 ) ax . tick_params ( length = 0 , which = 'minor' , pad = 5 , labelsize = 10 ) ax . set_xticks ( major_ticks , minor = False ) ax . set_xticklabels ( labels , minor = False ) ax . set_xticks ( minor_ticks , minor = True ) ax . set_xticklabels ( minor_tick_labels (), minor = True , rotation = 90 ) ax . spines [ 'top' ] . set_visible ( False ) ax . spines [ 'bottom' ] . set_visible ( False ) ax . spines [ 'left' ] . set_visible ( False ) ax . spines [ 'right' ] . set_visible ( False ) ax . set_title ( title , fontsize = 24 ) plt . show () Note The function normalizes the vector so that the sum of all the frequencies is equal to 1. If you want to normalize the frequencies so that the trinucleotide composition of the genomic regions from which the mutations have been obtained, you need to normalize the vector taking into account the trinucleotide composition before using the function plot_signature. Normalization of the vector \u00b6 In order to normalize the vector you will need to import from bgreference the reference genome in which the data has been sequenced. You will also need the vector with the mutations frequency ( profile ) and the directory of a file with the genomic regions from which the mutations have been obtained ( regions_file_dir ), with at least the columns: CHROMOSOME , START , END . Needed functions \u00b6 from itertools import product import pandas as pd import numpy as np cb = dict ( zip ( 'ACGT' , 'TGCA' )) def triplet_index ( triplet ): a , ref , b = tuple ( list ( triplet )) s = 16 * ( ref == 'T' ) t = 4 * (( a == 'C' ) + 2 * ( a == 'G' ) + 3 * ( a == 'T' )) u = ( b == 'C' ) + 2 * ( b == 'G' ) + 3 * ( b == 'T' ) return s + t + u def sbs_format ( triplet_count ): \"\"\"Maps ref triplets to 96 SBS channel\"\"\" vector = [] for ref in 'CT' : for alt in 'ACGT' : if alt != ref : for a , b in product ( cb , repeat = 2 ): vector . append ( triplet_count [ triplet_index ( a + ref + b )]) return vector def triplets (): for ref in 'CT' : for a , b in product ( cb , repeat = 2 ): yield a + ref + b def count_triplets ( seq ): return [ seq . count ( t ) + seq . count ( rev ( t )) for t in triplets ()] def rev ( seq ): \"\"\"reverse complement of seq\"\"\" return '' . join ( list ( map ( lambda s : cb [ s ], seq [:: - 1 ]))) def get_triplet_counts_region ( regions_file_dir , reference_genome = hg38 ): \"\"\" Function to obtain the vector with 96 triplet counts given the regions file. \"\"\" regions = pd . read_csv ( regions_file_dir , sep = ' \\t ' , dtype = { 'CHROMOSOME' : 'string' }) assert ( np . all ( regions . apply ( lambda r : r [ 'END' ] - r [ 'START' ] + 1 > 0 , axis = 1 ))) regions [ 'interval' ] = regions . apply ( lambda r : ( r [ 'CHROMOSOME' ], r [ 'START' ], r [ 'END' ]), axis = 1 ) counts = np . zeros ( 32 ) for chrom , start , end in list ( regions [ 'interval' ]): try : seq = reference_genome ( chrom , start - 1 , size = end - start + 3 ) # sequence +1 nt 5' and 3' flanking nucleotides c = np . array ( count_triplets ( seq )) counts += c except Exception as e : print ( e ) return sbs_format ( list ( map ( int , counts ))) Normalization \u00b6 region_triplet_abundance = get_triplet_counts_region ( regions_file_dir ) normalized_profile = np . array ( profile ) / np . array ( region_triplet_abundance ) Reference \u00b6 Paula Gomis Ferran Mui\u00f1os","title":"Mutational profile"},{"location":"Plots_and_scripts/Mutational_profile/#mutational-profile","text":"The function plot_signature will allow you to plot the mutational profile of a sample given the vector of 96 channels (see y axis in the example figure) with the frequencies of each nucleotide change. It takes as input the the vector with the mutations frequency ( profile ) and the title of the plot ( title ). The function minor_tick_labels is needed to generate the labels of the plot.","title":"Mutational profile"},{"location":"Plots_and_scripts/Mutational_profile/#example","text":"","title":"Example"},{"location":"Plots_and_scripts/Mutational_profile/#function","text":"import seaborn as sns import numpy as np def minor_tick_labels (): major_labels = [ 'C>A' , 'C>G' , 'C>T' , 'T>A' , 'T>C' , 'T>G' ] flanks = [ 'AA' , 'AC' , 'AG' , 'AT' , 'CA' , 'CC' , 'CG' , 'CT' , 'GA' , 'GC' , 'GG' , 'GT' , 'TA' , 'TC' , 'TG' , 'TT' ] minor_labels = [] for subs in major_labels : for flank in flanks : minor_labels . append ( flank [ 0 ] + subs [ 0 ] + flank [ 1 ]) return minor_labels def plot_signature ( profile , title = None ): \"\"\" Args: profile: 96-array in lexicographic order title: string Returns: produces the signature bar plot \"\"\" fig , ax = plt . subplots ( figsize = ( 15 , 2 )) total = np . sum ( profile ) if abs ( total - 1 ) > 0.01 : profile = profile / total sns . set ( font_scale = 1.5 ) sns . set_style ( 'white' ) # bar plot barlist = ax . bar ( range ( 96 ), profile ) color_list = [ '#72bcd4' , 'k' , 'r' , '#7e7e7e' , 'g' , '#e6add8' ] for category in range ( 6 ): for i in range ( 16 ): barlist [ category * 16 + i ] . set_color ( color_list [ category ]) ax . set_xlim ([ - 0.5 , 96 ]) ymax = np . max ( profile ) * 1.2 ax . set_ylim ( 0 , ymax ) # ax.set_ylabel('subs rel freq') labels = [ 'C>A' , 'C>G' , 'C>T' , 'T>A' , 'T>C' , 'T>G' ] major_ticks = np . arange ( 8 , 8 + 16 * 5 + 1 , 16 ) minor_ticks = np . arange ( 0.2 , 96.2 , 1 ) ax . tick_params ( length = 0 , which = 'major' , pad = 30 , labelsize = 12 ) ax . tick_params ( length = 0 , which = 'minor' , pad = 5 , labelsize = 10 ) ax . set_xticks ( major_ticks , minor = False ) ax . set_xticklabels ( labels , minor = False ) ax . set_xticks ( minor_ticks , minor = True ) ax . set_xticklabels ( minor_tick_labels (), minor = True , rotation = 90 ) ax . spines [ 'top' ] . set_visible ( False ) ax . spines [ 'bottom' ] . set_visible ( False ) ax . spines [ 'left' ] . set_visible ( False ) ax . spines [ 'right' ] . set_visible ( False ) ax . set_title ( title , fontsize = 24 ) plt . show () Note The function normalizes the vector so that the sum of all the frequencies is equal to 1. If you want to normalize the frequencies so that the trinucleotide composition of the genomic regions from which the mutations have been obtained, you need to normalize the vector taking into account the trinucleotide composition before using the function plot_signature.","title":"Function"},{"location":"Plots_and_scripts/Mutational_profile/#normalization-of-the-vector","text":"In order to normalize the vector you will need to import from bgreference the reference genome in which the data has been sequenced. You will also need the vector with the mutations frequency ( profile ) and the directory of a file with the genomic regions from which the mutations have been obtained ( regions_file_dir ), with at least the columns: CHROMOSOME , START , END .","title":"Normalization of the vector"},{"location":"Plots_and_scripts/Mutational_profile/#needed-functions","text":"from itertools import product import pandas as pd import numpy as np cb = dict ( zip ( 'ACGT' , 'TGCA' )) def triplet_index ( triplet ): a , ref , b = tuple ( list ( triplet )) s = 16 * ( ref == 'T' ) t = 4 * (( a == 'C' ) + 2 * ( a == 'G' ) + 3 * ( a == 'T' )) u = ( b == 'C' ) + 2 * ( b == 'G' ) + 3 * ( b == 'T' ) return s + t + u def sbs_format ( triplet_count ): \"\"\"Maps ref triplets to 96 SBS channel\"\"\" vector = [] for ref in 'CT' : for alt in 'ACGT' : if alt != ref : for a , b in product ( cb , repeat = 2 ): vector . append ( triplet_count [ triplet_index ( a + ref + b )]) return vector def triplets (): for ref in 'CT' : for a , b in product ( cb , repeat = 2 ): yield a + ref + b def count_triplets ( seq ): return [ seq . count ( t ) + seq . count ( rev ( t )) for t in triplets ()] def rev ( seq ): \"\"\"reverse complement of seq\"\"\" return '' . join ( list ( map ( lambda s : cb [ s ], seq [:: - 1 ]))) def get_triplet_counts_region ( regions_file_dir , reference_genome = hg38 ): \"\"\" Function to obtain the vector with 96 triplet counts given the regions file. \"\"\" regions = pd . read_csv ( regions_file_dir , sep = ' \\t ' , dtype = { 'CHROMOSOME' : 'string' }) assert ( np . all ( regions . apply ( lambda r : r [ 'END' ] - r [ 'START' ] + 1 > 0 , axis = 1 ))) regions [ 'interval' ] = regions . apply ( lambda r : ( r [ 'CHROMOSOME' ], r [ 'START' ], r [ 'END' ]), axis = 1 ) counts = np . zeros ( 32 ) for chrom , start , end in list ( regions [ 'interval' ]): try : seq = reference_genome ( chrom , start - 1 , size = end - start + 3 ) # sequence +1 nt 5' and 3' flanking nucleotides c = np . array ( count_triplets ( seq )) counts += c except Exception as e : print ( e ) return sbs_format ( list ( map ( int , counts )))","title":"Needed functions"},{"location":"Plots_and_scripts/Mutational_profile/#normalization","text":"region_triplet_abundance = get_triplet_counts_region ( regions_file_dir ) normalized_profile = np . array ( profile ) / np . array ( region_triplet_abundance )","title":"Normalization"},{"location":"Plots_and_scripts/Mutational_profile/#reference","text":"Paula Gomis Ferran Mui\u00f1os","title":"Reference"},{"location":"Plots_and_scripts/Needle_plot/","text":"Needle plot \u00b6 Description \u00b6 Reference \u00b6","title":"Needle plot"},{"location":"Plots_and_scripts/Needle_plot/#needle-plot","text":"","title":"Needle plot"},{"location":"Plots_and_scripts/Needle_plot/#description","text":"","title":"Description"},{"location":"Plots_and_scripts/Needle_plot/#reference","text":"","title":"Reference"},{"location":"Tools/Conda/","text":"Conda \u00b6 Description \u00b6 Conda is an open source package management system and environment management system that runs on Windows, macOS, Linux and z/OS. Conda quickly installs, runs and updates packages and their dependencies. Get started \u00b6 conda create -n <env name> <package [= <version> ] > conda activate <env name> conda install <package [= version ] > Cheatsheet \u00b6 Environments \u00b6 Activate an environment: conda activate <environment name> Deactivates an environment. If in base , closes conda. conda deactivate List all environments: conda env list conda info --envs Create a new virtual environment with conda create --name <environment name> [ <packages [= <version> ] > ] Export active environment to a file conda env export > environment.yml Export all environments to its own file: for env in $( conda env list | cut -d \" \" -f1 ) ; do if [[ ${ env : 0 : 1 } == \"#\" ]] ; then continue ; fi ; conda env export -n $env > ${ env } .yml done Create environment from file conda env create -f environment.yml Clone an environment conda create --name <environment name> --clone <original environment> Remove an environment conda env remove --name <environment name> conda remove --name <environment name> --all List all packages installed (in current environment) conda list List all packages installed with path conda list --explicit Show history of changes in packages conda list --revisions Packages \u00b6 Install a package ( use -f to force the installation ) conda install <package> Install package(s) specified in a file (like a Python requirements file) conda install --file <file> Uninstall a package conda remove <package> Search for a package conda search <package> Configuration \u00b6 Show configuration conda config --show Add channels (use add instead of append to put the channel on the top of the list) conda config --append channels <channel name> Building Packages \u00b6 Install conda build conda install conda-build Build package conda build <directory with the files> Build for other platforms conda convert --platform all <path to package> Install built package conda install --use-local <package> From Pypi \u00b6 Create files conda skeleton pypi <package> Build for different Python version conda build --python <version> <directory with the files> Custom Channel \u00b6 Add channel conda config --append channels file://<path to folder> (re)build the index conda index <channel folder>/<platform> Reference \u00b6 Jordi Deu Pons Miguel Grau Federica Brando Carlos L\u00f3pez","title":"Conda"},{"location":"Tools/Conda/#conda","text":"","title":"Conda"},{"location":"Tools/Conda/#description","text":"Conda is an open source package management system and environment management system that runs on Windows, macOS, Linux and z/OS. Conda quickly installs, runs and updates packages and their dependencies.","title":"Description"},{"location":"Tools/Conda/#get-started","text":"conda create -n <env name> <package [= <version> ] > conda activate <env name> conda install <package [= version ] >","title":"Get started"},{"location":"Tools/Conda/#cheatsheet","text":"","title":"Cheatsheet"},{"location":"Tools/Conda/#environments","text":"Activate an environment: conda activate <environment name> Deactivates an environment. If in base , closes conda. conda deactivate List all environments: conda env list conda info --envs Create a new virtual environment with conda create --name <environment name> [ <packages [= <version> ] > ] Export active environment to a file conda env export > environment.yml Export all environments to its own file: for env in $( conda env list | cut -d \" \" -f1 ) ; do if [[ ${ env : 0 : 1 } == \"#\" ]] ; then continue ; fi ; conda env export -n $env > ${ env } .yml done Create environment from file conda env create -f environment.yml Clone an environment conda create --name <environment name> --clone <original environment> Remove an environment conda env remove --name <environment name> conda remove --name <environment name> --all List all packages installed (in current environment) conda list List all packages installed with path conda list --explicit Show history of changes in packages conda list --revisions","title":"Environments"},{"location":"Tools/Conda/#packages","text":"Install a package ( use -f to force the installation ) conda install <package> Install package(s) specified in a file (like a Python requirements file) conda install --file <file> Uninstall a package conda remove <package> Search for a package conda search <package>","title":"Packages"},{"location":"Tools/Conda/#configuration","text":"Show configuration conda config --show Add channels (use add instead of append to put the channel on the top of the list) conda config --append channels <channel name>","title":"Configuration"},{"location":"Tools/Conda/#building-packages","text":"Install conda build conda install conda-build Build package conda build <directory with the files> Build for other platforms conda convert --platform all <path to package> Install built package conda install --use-local <package>","title":"Building Packages"},{"location":"Tools/Conda/#from-pypi","text":"Create files conda skeleton pypi <package> Build for different Python version conda build --python <version> <directory with the files>","title":"From Pypi"},{"location":"Tools/Conda/#custom-channel","text":"Add channel conda config --append channels file://<path to folder> (re)build the index conda index <channel folder>/<platform>","title":"Custom Channel"},{"location":"Tools/Conda/#reference","text":"Jordi Deu Pons Miguel Grau Federica Brando Carlos L\u00f3pez","title":"Reference"},{"location":"Tools/Docker/","text":"Docker \u00b6 Description \u00b6 Reference \u00b6","title":"Docker"},{"location":"Tools/Docker/#docker","text":"","title":"Docker"},{"location":"Tools/Docker/#description","text":"","title":"Description"},{"location":"Tools/Docker/#reference","text":"","title":"Reference"},{"location":"Tools/Nextflow/","text":"Nextflow \u00b6 Nextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of data-driven, computational pipelines written in the most common scripting languages. Usage \u00b6 To run the default installed version of Nextflow, simply load the nextflow module: $ module load nextflow $ nextflow help Usage: nextflow [ options ] COMMAND [ arg... ] For usage documentation, run nextflow help . Submitting processes as serial jobs \u00b6 Recommended for serial jobs only This section is recommended for serial jobs only. For parallel jobs, please see the Parallel jobs section below. Nextflow supports the ability to submit pipeline scripts as separate cluster jobs using the SGE executor. To enable the SGE executor, simply set to process.executor property to sge in a configuration file named nextflow.config in the job working directory. The amount of resources requested by each job submission is defined in the cluster options section, where all Univa scheduler resources are supported. For example, to run all pipeline jobs with 2 serial cores and 2GB of memory for 1 hour, create the following configuration file: process.executor='sge' process.clusterOptions='-pe smp 2 -l h_vmem=1G,h_rt=1:0:0' Setting the memory limit for serial jobs Add the -DXmx option to limit the amount of memory Nextflow can use in serial jobs. For more information regarding the Java VM memory allocation, see here. Parallel jobs \u00b6 Parallel jobs will use the in-built Apache Ignite clustering platform; Execution will be performed on the nodes requested in the submit request over MPI rather than submitting new jobs for each pipeline. Do not use the SGE executor in parallel jobs Using the SGE executor for parallel jobs causes the master job to hang until it is killed by the scheduler for exceeding walltime. This is due to Apache Ignite not being able to communicate to other pipeline scripts submitted as separate jobs. To ensure parallel jobs use Apache Ignite, add the following to the configuration file (or omit the process.executor setting): process.executor='ignite' Example jobs \u00b6 Serial job \u00b6 Here is an example job taken from the Nextflow website to submit each process in the input.nf file as a new cluster job with 1 core and 1GB of memory. Ensure the cumulative runtime across all processes does not exceed the runtime requested in the master job: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G module load nextflow nextflow -DXmx=1G \\ -C nextflow.config \\ run input.nf Parallel job \u00b6 Here is an example job taken from the Nextflow website to run each process in the input.nf file using 48 cores across 2 sdv nodes with Apache Ignite: #!/bin/bash #$ -cwd #$ -j y #$ -pe parallel 48 #$ -l infiniband=sdv-i #$ -l h_rt=240:0:0 module load nextflow openmpi mpirun --pernode \\ nextflow run input.nf \\ -with-mpi Links \u00b6 Nextflow documentation Nextflow basic pipeline example Nextflow presentation videos Nextflow community support Nextflow MPI Apache Ignite Reference \u00b6 Jordi Deu-Pons Carlos L\u00f3pez Elorduy Miguel Grau","title":"Nextflow"},{"location":"Tools/Nextflow/#nextflow","text":"Nextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of data-driven, computational pipelines written in the most common scripting languages.","title":"Nextflow"},{"location":"Tools/Nextflow/#usage","text":"To run the default installed version of Nextflow, simply load the nextflow module: $ module load nextflow $ nextflow help Usage: nextflow [ options ] COMMAND [ arg... ] For usage documentation, run nextflow help .","title":"Usage"},{"location":"Tools/Nextflow/#submitting-processes-as-serial-jobs","text":"Recommended for serial jobs only This section is recommended for serial jobs only. For parallel jobs, please see the Parallel jobs section below. Nextflow supports the ability to submit pipeline scripts as separate cluster jobs using the SGE executor. To enable the SGE executor, simply set to process.executor property to sge in a configuration file named nextflow.config in the job working directory. The amount of resources requested by each job submission is defined in the cluster options section, where all Univa scheduler resources are supported. For example, to run all pipeline jobs with 2 serial cores and 2GB of memory for 1 hour, create the following configuration file: process.executor='sge' process.clusterOptions='-pe smp 2 -l h_vmem=1G,h_rt=1:0:0' Setting the memory limit for serial jobs Add the -DXmx option to limit the amount of memory Nextflow can use in serial jobs. For more information regarding the Java VM memory allocation, see here.","title":"Submitting processes as serial jobs"},{"location":"Tools/Nextflow/#parallel-jobs","text":"Parallel jobs will use the in-built Apache Ignite clustering platform; Execution will be performed on the nodes requested in the submit request over MPI rather than submitting new jobs for each pipeline. Do not use the SGE executor in parallel jobs Using the SGE executor for parallel jobs causes the master job to hang until it is killed by the scheduler for exceeding walltime. This is due to Apache Ignite not being able to communicate to other pipeline scripts submitted as separate jobs. To ensure parallel jobs use Apache Ignite, add the following to the configuration file (or omit the process.executor setting): process.executor='ignite'","title":"Parallel jobs"},{"location":"Tools/Nextflow/#example-jobs","text":"","title":"Example jobs"},{"location":"Tools/Nextflow/#serial-job","text":"Here is an example job taken from the Nextflow website to submit each process in the input.nf file as a new cluster job with 1 core and 1GB of memory. Ensure the cumulative runtime across all processes does not exceed the runtime requested in the master job: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G module load nextflow nextflow -DXmx=1G \\ -C nextflow.config \\ run input.nf","title":"Serial job"},{"location":"Tools/Nextflow/#parallel-job","text":"Here is an example job taken from the Nextflow website to run each process in the input.nf file using 48 cores across 2 sdv nodes with Apache Ignite: #!/bin/bash #$ -cwd #$ -j y #$ -pe parallel 48 #$ -l infiniband=sdv-i #$ -l h_rt=240:0:0 module load nextflow openmpi mpirun --pernode \\ nextflow run input.nf \\ -with-mpi","title":"Parallel job"},{"location":"Tools/Nextflow/#links","text":"Nextflow documentation Nextflow basic pipeline example Nextflow presentation videos Nextflow community support Nextflow MPI Apache Ignite","title":"Links"},{"location":"Tools/Nextflow/#reference","text":"Jordi Deu-Pons Carlos L\u00f3pez Elorduy Miguel Grau","title":"Reference"},{"location":"Tools/BBG-tools/BGconfig/","text":"BGconfig \u00b6 Description \u00b6 Reference \u00b6","title":"BGconfig"},{"location":"Tools/BBG-tools/BGconfig/#bgconfig","text":"","title":"BGconfig"},{"location":"Tools/BBG-tools/BGconfig/#description","text":"","title":"Description"},{"location":"Tools/BBG-tools/BGconfig/#reference","text":"","title":"Reference"},{"location":"Tools/BBG-tools/BGdata/","text":"BGdata \u00b6 Description \u00b6 Reference \u00b6","title":"BGdata"},{"location":"Tools/BBG-tools/BGdata/#bgdata","text":"","title":"BGdata"},{"location":"Tools/BBG-tools/BGdata/#description","text":"","title":"Description"},{"location":"Tools/BBG-tools/BGdata/#reference","text":"","title":"Reference"},{"location":"Tools/BBG-tools/BGlogs/","text":"BGlogs \u00b6 Description \u00b6 Reference \u00b6","title":"BGlogs"},{"location":"Tools/BBG-tools/BGlogs/#bglogs","text":"","title":"BGlogs"},{"location":"Tools/BBG-tools/BGlogs/#description","text":"","title":"Description"},{"location":"Tools/BBG-tools/BGlogs/#reference","text":"","title":"Reference"},{"location":"Tools/BBG-tools/BGpack/","text":"BGpack \u00b6 Description \u00b6 Reference \u00b6","title":"BGpack"},{"location":"Tools/BBG-tools/BGpack/#bgpack","text":"","title":"BGpack"},{"location":"Tools/BBG-tools/BGpack/#description","text":"","title":"Description"},{"location":"Tools/BBG-tools/BGpack/#reference","text":"","title":"Reference"},{"location":"Tools/BBG-tools/BGreference/","text":"BgReference \u00b6 Description \u00b6 BgReference is a library to fast retrive Genome Reference partial sequences. Instalation \u00b6 conda install -c conda-forge -c bbglab bgreference or pip install bgreference Examples \u00b6 from bgreference import hg19, hg38 # Get 10 bases from chromosome one build hg19 hg19 ( '1' , 12345 , size = 10 ) # Get the sequence of the whole chromosome hg19 ( '1' , ( 1 ) , size = None ) # You can use synonymous sequence names hg19 ( 2 , 23456 ) hg19 ( '2' , 23456 ) hg19 ( 'chr2' , 23456 ) hg19 ( 'MT' , 234 , size = 3 ) hg19 ( 'chrM' , 234 , size = 3 ) hg19 ( 'chrMT' , 234 , size = 3 ) Repository \u00b6 Click here to see the repository of BgReference . Reference \u00b6 Jordi Deu-Pons Miguel Grau Paula Gomis","title":"BgReference"},{"location":"Tools/BBG-tools/BGreference/#bgreference","text":"","title":"BgReference"},{"location":"Tools/BBG-tools/BGreference/#description","text":"BgReference is a library to fast retrive Genome Reference partial sequences.","title":"Description"},{"location":"Tools/BBG-tools/BGreference/#instalation","text":"conda install -c conda-forge -c bbglab bgreference or pip install bgreference","title":"Instalation"},{"location":"Tools/BBG-tools/BGreference/#examples","text":"from bgreference import hg19, hg38 # Get 10 bases from chromosome one build hg19 hg19 ( '1' , 12345 , size = 10 ) # Get the sequence of the whole chromosome hg19 ( '1' , ( 1 ) , size = None ) # You can use synonymous sequence names hg19 ( 2 , 23456 ) hg19 ( '2' , 23456 ) hg19 ( 'chr2' , 23456 ) hg19 ( 'MT' , 234 , size = 3 ) hg19 ( 'chrM' , 234 , size = 3 ) hg19 ( 'chrMT' , 234 , size = 3 )","title":"Examples"},{"location":"Tools/BBG-tools/BGreference/#repository","text":"Click here to see the repository of BgReference .","title":"Repository"},{"location":"Tools/BBG-tools/BGreference/#reference","text":"Jordi Deu-Pons Miguel Grau Paula Gomis","title":"Reference"},{"location":"Tools/BBG-tools/BGsignature/","text":"BGsignature \u00b6 Description \u00b6 Reference \u00b6","title":"BGsignature"},{"location":"Tools/BBG-tools/BGsignature/#bgsignature","text":"","title":"BGsignature"},{"location":"Tools/BBG-tools/BGsignature/#description","text":"","title":"Description"},{"location":"Tools/BBG-tools/BGsignature/#reference","text":"","title":"Reference"},{"location":"Tools/BBG-tools/BGvep/","text":"BGvep \u00b6 Description \u00b6 Reference \u00b6","title":"BGvep"},{"location":"Tools/BBG-tools/BGvep/#bgvep","text":"","title":"BGvep"},{"location":"Tools/BBG-tools/BGvep/#description","text":"","title":"Description"},{"location":"Tools/BBG-tools/BGvep/#reference","text":"","title":"Reference"},{"location":"Tools/BBG-tools/OpenVariant/","text":"OpenVariant \u00b6 Description \u00b6 OpenVariant is a comprehensive Python package that provides different functionalities to read, parse and operate different multiple input file formats (e. g. tsv , csv , vcf , maf , bed ), being able to build an unified output with a proper annotation file structure. Usage \u00b6 Click here to see the installation guide and the complete documentation of OpenVariant. When working with OpenVariant, we need to distinguish 3 different types of files: input files and annotation file , which are provided by the user and output file , which will returned from the function. Input files will be the group of files in different formats (e.g. tsv, csv, vcf, maf, bed) that we want to parse. Annotation file is a YAML file which describes how the input files are processed and how the output file will look like. Output files are generated by OpenVariant and they are the result of the process. Functions \u00b6 OpenVariant has several functions to perform different tasks: find_files : Find files with a given pattern name in a given folder. Variant : Parse an input file through the annotation file. It will generate an object which you can apply different functionalities cat : It will show on the stdout (standard out) the whole parsed output. group_by : It will generate an iterator that will contain three variables: group_key (the value of each group), group_result (a list of all rows that pertain to each group) and command (if it uses the script parameter or not). It will group the parsed result for each different value of the specified key_by . count : It returns the number of rows that matches a specific conditions. Click here to see several examples of each of the functions from OpenVariant. Parameters \u00b6 The different options and parameters of these functions are specified in the annotation file , which has several required and optional parameters. Click here to learn about the parameters in the annotation file and a to see a template of the annotation file . Reference \u00b6 David Mart\u00ednez Paula Gomis","title":"OpenVariant"},{"location":"Tools/BBG-tools/OpenVariant/#openvariant","text":"","title":"OpenVariant"},{"location":"Tools/BBG-tools/OpenVariant/#description","text":"OpenVariant is a comprehensive Python package that provides different functionalities to read, parse and operate different multiple input file formats (e. g. tsv , csv , vcf , maf , bed ), being able to build an unified output with a proper annotation file structure.","title":"Description"},{"location":"Tools/BBG-tools/OpenVariant/#usage","text":"Click here to see the installation guide and the complete documentation of OpenVariant. When working with OpenVariant, we need to distinguish 3 different types of files: input files and annotation file , which are provided by the user and output file , which will returned from the function. Input files will be the group of files in different formats (e.g. tsv, csv, vcf, maf, bed) that we want to parse. Annotation file is a YAML file which describes how the input files are processed and how the output file will look like. Output files are generated by OpenVariant and they are the result of the process.","title":"Usage"},{"location":"Tools/BBG-tools/OpenVariant/#functions","text":"OpenVariant has several functions to perform different tasks: find_files : Find files with a given pattern name in a given folder. Variant : Parse an input file through the annotation file. It will generate an object which you can apply different functionalities cat : It will show on the stdout (standard out) the whole parsed output. group_by : It will generate an iterator that will contain three variables: group_key (the value of each group), group_result (a list of all rows that pertain to each group) and command (if it uses the script parameter or not). It will group the parsed result for each different value of the specified key_by . count : It returns the number of rows that matches a specific conditions. Click here to see several examples of each of the functions from OpenVariant.","title":"Functions"},{"location":"Tools/BBG-tools/OpenVariant/#parameters","text":"The different options and parameters of these functions are specified in the annotation file , which has several required and optional parameters. Click here to learn about the parameters in the annotation file and a to see a template of the annotation file .","title":"Parameters"},{"location":"Tools/BBG-tools/OpenVariant/#reference","text":"David Mart\u00ednez Paula Gomis","title":"Reference"},{"location":"Tools/Sequencing_tools/Bedtools/","text":"Bedtools \u00b6 The Bedtools suite is a collection of tools for a wide-range of genomics analysis tasks. Installation \u00b6 You can check the installation guide here . Usage \u00b6 To run the default installed version of Bedtools, simply load the bedtools module: $ bedtools -h Usage: bedtools <subcommand> [ options ] For full usage documentation, run bedtools -h. Example job \u00b6 Serial job \u00b6 Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G # Report the base-pair overlap between the features in two BED files. bedtools intersect -a reads.bed -b genes.bed Links \u00b6 Bedtools GitHub Bedtools documentation Reference \u00b6 Hania Kranas","title":"Bedtools"},{"location":"Tools/Sequencing_tools/Bedtools/#bedtools","text":"The Bedtools suite is a collection of tools for a wide-range of genomics analysis tasks.","title":"Bedtools"},{"location":"Tools/Sequencing_tools/Bedtools/#installation","text":"You can check the installation guide here .","title":"Installation"},{"location":"Tools/Sequencing_tools/Bedtools/#usage","text":"To run the default installed version of Bedtools, simply load the bedtools module: $ bedtools -h Usage: bedtools <subcommand> [ options ] For full usage documentation, run bedtools -h.","title":"Usage"},{"location":"Tools/Sequencing_tools/Bedtools/#example-job","text":"","title":"Example job"},{"location":"Tools/Sequencing_tools/Bedtools/#serial-job","text":"Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G # Report the base-pair overlap between the features in two BED files. bedtools intersect -a reads.bed -b genes.bed","title":"Serial job"},{"location":"Tools/Sequencing_tools/Bedtools/#links","text":"Bedtools GitHub Bedtools documentation","title":"Links"},{"location":"Tools/Sequencing_tools/Bedtools/#reference","text":"Hania Kranas","title":"Reference"},{"location":"Tools/Sequencing_tools/Bowtie2/","text":"Bowtie2 \u00b6 Bowtie2 is an ultra fast and memory-efficient tool for aligning sequencing reads to long reference sequences. Installation \u00b6 You can check the installation documentation here . Conda \u00b6 conda install -c bioconda bowtie2 Package manager \u00b6 sudo apt update sudo apt install bowtie2 Manually on Ubuntu/Linux \u00b6 Create and go to install directory cd $HOME /tools/bowtie2/ Download Ubuntu/Linux version wget https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.4.2/bowtie2-2.4.2-sra-linux-x86_64.zip/download Decompress unzip download Add location to system PATH export PATH = $HOME /tools/bowtie2/bowtie2-2.4.2-sra-linux-x86_64: $PATH Check installation \u00b6 bowtie2 --help Usage \u00b6 $ bowtie2 -h Usage: bowtie2 [ options ] * -x <bt2-idx> { -1 <m1> -2 <m2> | -U <r> | --interleaved <i> } -S [ <sam> ] For full usage documentation, run bowtie2 -h . Example job \u00b6 Serial job \u00b6 Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G # Prepare example genomes in <inputDir> # Output is stored in <outputDir> bowtie2-build <inputDir> <outputDir> bowtie2-inspect <outputDir> Links \u00b6 Bowtie2 GitHub Bowtie2 example Reference \u00b6 Hania Kranas","title":"Bowtie2"},{"location":"Tools/Sequencing_tools/Bowtie2/#bowtie2","text":"Bowtie2 is an ultra fast and memory-efficient tool for aligning sequencing reads to long reference sequences.","title":"Bowtie2"},{"location":"Tools/Sequencing_tools/Bowtie2/#installation","text":"You can check the installation documentation here .","title":"Installation"},{"location":"Tools/Sequencing_tools/Bowtie2/#conda","text":"conda install -c bioconda bowtie2","title":"Conda"},{"location":"Tools/Sequencing_tools/Bowtie2/#package-manager","text":"sudo apt update sudo apt install bowtie2","title":"Package manager"},{"location":"Tools/Sequencing_tools/Bowtie2/#manually-on-ubuntulinux","text":"Create and go to install directory cd $HOME /tools/bowtie2/ Download Ubuntu/Linux version wget https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.4.2/bowtie2-2.4.2-sra-linux-x86_64.zip/download Decompress unzip download Add location to system PATH export PATH = $HOME /tools/bowtie2/bowtie2-2.4.2-sra-linux-x86_64: $PATH","title":"Manually on Ubuntu/Linux"},{"location":"Tools/Sequencing_tools/Bowtie2/#check-installation","text":"bowtie2 --help","title":"Check installation"},{"location":"Tools/Sequencing_tools/Bowtie2/#usage","text":"$ bowtie2 -h Usage: bowtie2 [ options ] * -x <bt2-idx> { -1 <m1> -2 <m2> | -U <r> | --interleaved <i> } -S [ <sam> ] For full usage documentation, run bowtie2 -h .","title":"Usage"},{"location":"Tools/Sequencing_tools/Bowtie2/#example-job","text":"","title":"Example job"},{"location":"Tools/Sequencing_tools/Bowtie2/#serial-job","text":"Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G # Prepare example genomes in <inputDir> # Output is stored in <outputDir> bowtie2-build <inputDir> <outputDir> bowtie2-inspect <outputDir>","title":"Serial job"},{"location":"Tools/Sequencing_tools/Bowtie2/#links","text":"Bowtie2 GitHub Bowtie2 example","title":"Links"},{"location":"Tools/Sequencing_tools/Bowtie2/#reference","text":"Hania Kranas","title":"Reference"},{"location":"Tools/Sequencing_tools/Cutadapt/","text":"Cutadapt \u00b6 Description \u00b6 Reference \u00b6","title":"Cutadapt"},{"location":"Tools/Sequencing_tools/Cutadapt/#cutadapt","text":"","title":"Cutadapt"},{"location":"Tools/Sequencing_tools/Cutadapt/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/Cutadapt/#reference","text":"","title":"Reference"},{"location":"Tools/Sequencing_tools/Fastqc/","text":"Fastqc \u00b6 FastQC aims to provide a simple way to do some quality control checks on raw sequence data coming from high throughput sequencing pipelines. Installation \u00b6 apt-get \u00b6 sudo apt-get update sudo apt-get install fastqc apt \u00b6 sudo apt update sudo apt install fastqc Usage \u00b6 $ fastqc --help FastQC - A high throughput sequence QC analysis tool SYNOPSIS fastqc seqfile1 seqfile2 .. seqfileN fastqc [ -o output dir ] [ -- ( no ) extract ] [ -f fastq | bam | sam ] [ -c contaminant file ] seqfile1 .. seqfileN Example job \u00b6 Serial job \u00b6 Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G fastqc raw_data.fastq.gz raw_data2.fastq.gz Viewing the Fastqc results To view the Fastqc results, you may open the fastqc_report.html file in a web browser or the summary.txt file (located in the zipped output archive) on the command line. For assistance copying files to your local machine, please see the Moving Data page. Links \u00b6 FastQC website FastQC manual FastQC video tutorial Reference \u00b6 Hania Kranas","title":"Fastqc"},{"location":"Tools/Sequencing_tools/Fastqc/#fastqc","text":"FastQC aims to provide a simple way to do some quality control checks on raw sequence data coming from high throughput sequencing pipelines.","title":"Fastqc"},{"location":"Tools/Sequencing_tools/Fastqc/#installation","text":"","title":"Installation"},{"location":"Tools/Sequencing_tools/Fastqc/#apt-get","text":"sudo apt-get update sudo apt-get install fastqc","title":"apt-get"},{"location":"Tools/Sequencing_tools/Fastqc/#apt","text":"sudo apt update sudo apt install fastqc","title":"apt"},{"location":"Tools/Sequencing_tools/Fastqc/#usage","text":"$ fastqc --help FastQC - A high throughput sequence QC analysis tool SYNOPSIS fastqc seqfile1 seqfile2 .. seqfileN fastqc [ -o output dir ] [ -- ( no ) extract ] [ -f fastq | bam | sam ] [ -c contaminant file ] seqfile1 .. seqfileN","title":"Usage"},{"location":"Tools/Sequencing_tools/Fastqc/#example-job","text":"","title":"Example job"},{"location":"Tools/Sequencing_tools/Fastqc/#serial-job","text":"Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G fastqc raw_data.fastq.gz raw_data2.fastq.gz Viewing the Fastqc results To view the Fastqc results, you may open the fastqc_report.html file in a web browser or the summary.txt file (located in the zipped output archive) on the command line. For assistance copying files to your local machine, please see the Moving Data page.","title":"Serial job"},{"location":"Tools/Sequencing_tools/Fastqc/#links","text":"FastQC website FastQC manual FastQC video tutorial","title":"Links"},{"location":"Tools/Sequencing_tools/Fastqc/#reference","text":"Hania Kranas","title":"Reference"},{"location":"Tools/Sequencing_tools/Samtools/","text":"SAMtools \u00b6 SAMtools implements various utilities for post-processing alignments in the SAM format, such as indexing, variant caller and alignment viewer, and thus provides universal tools for processing read alignments. Installation \u00b6 Conda \u00b6 conda install -c bioconda samtools Manual \u00b6 For the manual installation, you can find the instructions here . Usage \u00b6 samtools view -b -S -o genome_reads_aligned.bam genome_reads_aligned.sam Core Usage To ensure that SAMtools uses the correct number of cores, the -@ ${NSLOTS} option should be used on commands that support it. Example job \u00b6 Serial job \u00b6 Here is an example job running on 4 cores and 8GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 4 #$ -l h_rt=1:0:0 #$ -l h_vmem=2G samtools view -@ ${ NSLOTS } -b -S -o genome_reads_aligned.bam \\ genome_reads_aligned.sam samtools sort -@ ${ NSLOTS } genome_reads_aligned.bam \\ > genome_reads_aligned.sorted.bam samtools index genome_reads_aligned.sorted.bam samtools mpileup -g -f ref_genome_1K.fna genome_reads_aligned.sorted.bam \\ > genome_variants.bcf Links \u00b6 Samtools GitHub Samtools website Samtools documentation Reference \u00b6 Hania Kranas","title":"SAMtools"},{"location":"Tools/Sequencing_tools/Samtools/#samtools","text":"SAMtools implements various utilities for post-processing alignments in the SAM format, such as indexing, variant caller and alignment viewer, and thus provides universal tools for processing read alignments.","title":"SAMtools"},{"location":"Tools/Sequencing_tools/Samtools/#installation","text":"","title":"Installation"},{"location":"Tools/Sequencing_tools/Samtools/#conda","text":"conda install -c bioconda samtools","title":"Conda"},{"location":"Tools/Sequencing_tools/Samtools/#manual","text":"For the manual installation, you can find the instructions here .","title":"Manual"},{"location":"Tools/Sequencing_tools/Samtools/#usage","text":"samtools view -b -S -o genome_reads_aligned.bam genome_reads_aligned.sam Core Usage To ensure that SAMtools uses the correct number of cores, the -@ ${NSLOTS} option should be used on commands that support it.","title":"Usage"},{"location":"Tools/Sequencing_tools/Samtools/#example-job","text":"","title":"Example job"},{"location":"Tools/Sequencing_tools/Samtools/#serial-job","text":"Here is an example job running on 4 cores and 8GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 4 #$ -l h_rt=1:0:0 #$ -l h_vmem=2G samtools view -@ ${ NSLOTS } -b -S -o genome_reads_aligned.bam \\ genome_reads_aligned.sam samtools sort -@ ${ NSLOTS } genome_reads_aligned.bam \\ > genome_reads_aligned.sorted.bam samtools index genome_reads_aligned.sorted.bam samtools mpileup -g -f ref_genome_1K.fna genome_reads_aligned.sorted.bam \\ > genome_variants.bcf","title":"Serial job"},{"location":"Tools/Sequencing_tools/Samtools/#links","text":"Samtools GitHub Samtools website Samtools documentation","title":"Links"},{"location":"Tools/Sequencing_tools/Samtools/#reference","text":"Hania Kranas","title":"Reference"},{"location":"Tools/Sequencing_tools/Trimmomatic/","text":"Trimmomatic \u00b6 Description \u00b6 Reference \u00b6","title":"Trimmomatic"},{"location":"Tools/Sequencing_tools/Trimmomatic/#trimmomatic","text":"","title":"Trimmomatic"},{"location":"Tools/Sequencing_tools/Trimmomatic/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/Trimmomatic/#reference","text":"","title":"Reference"},{"location":"Tools/Sequencing_tools/Vep/","text":"Ensembl-VEP \u00b6 VEP determines the effect of your variants (insertions, deletions and structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions. Usage \u00b6 In order to install VEP, you can follow the installation guide . Once it is installed, simply load the ensembl-vep module: $ vep Usage: ./vep [--cache|--offline|--database] [arguments] Basic options ============= --help Display this message and quit -i | --input_file Input file -o | --output_file Output file --force_overwrite Force overwriting of output file --species [species] Species to use [default: \"human\"] --everything Shortcut switch to turn on commonly used options. See web documentation for details [default: off] --fork [num_forks] Use forking to improve script runtime For full option documentation see here . Instructions on how to download and use cached files can be found here . To enable offline mode and use of the cache, pass the --offline and --cache flags. Example job \u00b6 Serial job \u00b6 Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G vep -i homo_sapiens_GRCh38.vcf \\ --cache \\ --offline \\ --output_file results Links \u00b6 Ensembl-VEP documentation Ensembl-VEP tutorial Ensembl-VEP examples Ensembl-VEP web application Reference \u00b6 To be added","title":"Vep"},{"location":"Tools/Sequencing_tools/Vep/#ensembl-vep","text":"VEP determines the effect of your variants (insertions, deletions and structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions.","title":"Ensembl-VEP"},{"location":"Tools/Sequencing_tools/Vep/#usage","text":"In order to install VEP, you can follow the installation guide . Once it is installed, simply load the ensembl-vep module: $ vep Usage: ./vep [--cache|--offline|--database] [arguments] Basic options ============= --help Display this message and quit -i | --input_file Input file -o | --output_file Output file --force_overwrite Force overwriting of output file --species [species] Species to use [default: \"human\"] --everything Shortcut switch to turn on commonly used options. See web documentation for details [default: off] --fork [num_forks] Use forking to improve script runtime For full option documentation see here . Instructions on how to download and use cached files can be found here . To enable offline mode and use of the cache, pass the --offline and --cache flags.","title":"Usage"},{"location":"Tools/Sequencing_tools/Vep/#example-job","text":"","title":"Example job"},{"location":"Tools/Sequencing_tools/Vep/#serial-job","text":"Here is an example job running on 1 core and 1GB of memory: #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G vep -i homo_sapiens_GRCh38.vcf \\ --cache \\ --offline \\ --output_file results","title":"Serial job"},{"location":"Tools/Sequencing_tools/Vep/#links","text":"Ensembl-VEP documentation Ensembl-VEP tutorial Ensembl-VEP examples Ensembl-VEP web application","title":"Links"},{"location":"Tools/Sequencing_tools/Vep/#reference","text":"To be added","title":"Reference"},{"location":"Tools/Sequencing_tools/pysam/","text":"pysam \u00b6 Description \u00b6 Reference \u00b6","title":"pysam"},{"location":"Tools/Sequencing_tools/pysam/#pysam","text":"","title":"pysam"},{"location":"Tools/Sequencing_tools/pysam/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/pysam/#reference","text":"","title":"Reference"},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/","text":"MosaicForecast \u00b6 Description \u00b6 Reference \u00b6","title":"MosaicForecast"},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/#mosaicforecast","text":"","title":"MosaicForecast"},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/#reference","text":"","title":"Reference"},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/","text":"Mutect2 \u00b6 Description \u00b6 Reference \u00b6","title":"Mutect2"},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/#mutect2","text":"","title":"Mutect2"},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/#reference","text":"","title":"Reference"},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/","text":"Platinum \u00b6 Description \u00b6 Reference \u00b6","title":"Platinum"},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/#platinum","text":"","title":"Platinum"},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/#reference","text":"","title":"Reference"},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/","text":"Sarek \u00b6 Description \u00b6 Reference \u00b6","title":"Sarek"},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/#sarek","text":"","title":"Sarek"},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/#description","text":"","title":"Description"},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/#reference","text":"","title":"Reference"},{"location":"Tools/Signature_tools/DeconstructSigs/","text":"DeconstructSigs \u00b6 Description \u00b6 Reference \u00b6","title":"DeconstructSigs"},{"location":"Tools/Signature_tools/DeconstructSigs/#deconstructsigs","text":"","title":"DeconstructSigs"},{"location":"Tools/Signature_tools/DeconstructSigs/#description","text":"","title":"Description"},{"location":"Tools/Signature_tools/DeconstructSigs/#reference","text":"","title":"Reference"},{"location":"Tools/Signature_tools/SigProfiler/","text":"SigProfiler \u00b6 Description \u00b6 Reference \u00b6","title":"SigProfiler"},{"location":"Tools/Signature_tools/SigProfiler/#sigprofiler","text":"","title":"SigProfiler"},{"location":"Tools/Signature_tools/SigProfiler/#description","text":"","title":"Description"},{"location":"Tools/Signature_tools/SigProfiler/#reference","text":"","title":"Reference"},{"location":"Tools/Signature_tools/SigProfilerJulia/","text":"SigProfilerJulia \u00b6 Description \u00b6 Reference \u00b6","title":"SigProfilerJulia"},{"location":"Tools/Signature_tools/SigProfilerJulia/#sigprofilerjulia","text":"","title":"SigProfilerJulia"},{"location":"Tools/Signature_tools/SigProfilerJulia/#description","text":"","title":"Description"},{"location":"Tools/Signature_tools/SigProfilerJulia/#reference","text":"","title":"Reference"},{"location":"Tools/Signature_tools/mSigHDP/","text":"mSigHDP \u00b6 Description \u00b6 Reference \u00b6","title":"mSigHDP"},{"location":"Tools/Signature_tools/mSigHDP/#msighdp","text":"","title":"mSigHDP"},{"location":"Tools/Signature_tools/mSigHDP/#description","text":"","title":"Description"},{"location":"Tools/Signature_tools/mSigHDP/#reference","text":"","title":"Reference"},{"location":"Tools/Signature_tools/mSignAct/","text":"mSignAct \u00b6 Description \u00b6 Reference \u00b6","title":"mSignAct"},{"location":"Tools/Signature_tools/mSignAct/#msignact","text":"","title":"mSignAct"},{"location":"Tools/Signature_tools/mSignAct/#description","text":"","title":"Description"},{"location":"Tools/Signature_tools/mSignAct/#reference","text":"","title":"Reference"},{"location":"Tools/Singularity/Building_containers/","text":"Building containers \u00b6 Singularity containers are built from a definition file which allows the container to be built identically by anyone possessing the file. Root privileges required to build a container Note that the process of building a container requires elevated privileges One primary task per container HPC containers are designed to perform one primary task, and should consist of a main application and its dependencies, in a similar way to how module files are provided. Since containers are lightweight, you can use separate containers instead of general purpose containers containing a collection of applications. This improves supportability, performance and reproducibility. Building a Singularity container from scratch \u00b6 Building from scratch gives complete control over the contents of the container, including operating system and packages. Certain packages may only be available for a specific version of Linux (i.e. compatibility issues) so being able to build a container from scratch enhances research capability. The following example demonstrates building an Ubuntu 20 (focal) container using definition file ubuntu20_helloworld.def that installs the python3 package via the Ubuntu package manager: BootStrap: debootstrap OSVersion: focal MirrorURL: http://us.archive.ubuntu.com/ubuntu/ %post apt-get install --yes python3 %runscript python3 \"${@}\" The build process is unattended, and will not succeed if any operations require interactive input. Be sure to use -y or --yes options when installing packages. Create the image (this step requires root privileges): sudo singularity build ubuntu20_helloworld.simg ubuntu20_helloworld.def This will result in a usable image in the current working directory. Be aware that if you want a very specific version of package from a repository, that package may not be available in future, so where possible, try to future-proof your containers. Building containers for other Linux distributions \u00b6 You may build Ubuntu images using CentOS and vice versa. However to bootstrap, you will need extra packages on the host OS to build the container. CentOS hosts require the debootstrap package to create Ubuntu containers, and Ubuntu hosts require the yum package to build CentOS containers. Alternatively you may create containers from an existing Singularity or Docker image, as explained in the following section. Since this method builds upon pre-built images, the debootstrap or yum packages are not required. Using LTS for Ubuntu definitions When building an Ubuntu container we recommend that you use a release with long term support (LTS release). Non-LTS Ubuntu releases have very limited support cycles which may lead to difficulties downloading packages if used after their end-of-life date. Building containers from an existing base image \u00b6 This enables you to either build or use an existing container as a base image to build other containers. Base images must be built first if part of a dependency chain and is no longer required once all dependent containers have been built. Singularity local images \u00b6 The following example demonstrates the creation of a local base Ubuntu 20 (focal) image using definition file ubuntu20_base.def , and then creating another container with python3 installed, using the local base image: BootStrap: debootstrap OSVersion: focal MirrorURL: http://us.archive.ubuntu.com/ubuntu/ Create the base image: sudo singularity build ubuntu20_base.simg ubuntu20_base.def The non-base image container (i.e. python3 in this example) can be built using definition file ubuntu20_python3.def : Bootstrap: localimage From: ubuntu20_base.simg %post apt-get install --yes python3 %runscript python3 \"${@}\" The result will be a container almost identical to the one created from scratch. sudo singularity build ubuntu20_python3.simg ubuntu20_python3.def Docker images \u00b6 You can also bootstrap from Docker containers, although if supplied by a third party, you have less visibility or control over these images, so use with caution, as this may impact the future reproducibility of results. The below example demonstrates installing the python3 package within an Ubuntu 20 (focal) container using definition file ubuntu20_docker_python3.def , which imports the ubuntu:20.04 base container available on the Docker Hub: Bootstrap: docker From: ubuntu:20.04 %post apt-get update apt-get install --yes python3 %runscript python3 \"${@}\" Build the container. This will produce a container similar to the previous examples, but may vary slightly in overall size depending on packages installed in the base docker image: sudo singularity build ubuntu20_docker_python3.simg ubuntu20_docker_python3.def Future-proofing your containers \u00b6 When building your own containers, be sure to make them portable and future-proof. Consider whether the container will still build and produce the same results if the OS release or application version changes. If copying files from a working directory as part of setup is unavoidable, ensure that any files copied from the working directory are are available for others to download (i.e. in a git repository if not large). Perform all setup as part of the build process. If any manual steps are performed after the container is built, they should be integrated within the definition file, and the container rebuilt. Consider if the ability to rebuild your container will be impacted by package updates, or deprecation of old releases. Legacy versions of CentOS applications Outdated minor CentOS releases are moved from the main CentOS servers to vault.centos.org. If you need to use a specific Operating System or application version other than the latest, you need to future-proof your container by using the CentOS vault. Definition file sections \u00b6 The following example definition file demonstrates commonly used definition file sections: %help %post %environment %test %runscript Help section \u00b6 The %help section is designed to provide information about the container when singularity run-help is run on the container, for example: $ singularity run-help /data/containers/public/python3_helloworld.simg Purpose: Test container to print \"Hello, World!\" in Python3. Author: ITS Research / QMUL. Post section \u00b6 The %post section contains the commands used to build the container, such as package installs, file downloads, compilation and software configuration. Environment section \u00b6 Environment settings supplied at build-time in the %post section are only set during build-time and are not available at run-time. Environment settings which need to be available at run-time should be added to the %environment section. Test section \u00b6 The %test section defines a set of commands or tests which should be run to validate the container has been built successfully. Some example tests include: installed binaries are available on the PATH variable --help or --version parameter for binaries (if supported) libraries, header files and man pages exist All tests will be run during the build process, after %post has completed. To build a container without running the tests, pass the -T or --notest option to the singularity build command. To run the tests for an existing container, run the singularity test command, for example: $ singularity test /data/containers/public/python3_helloworld.simg /usr/bin/python3 Runscript section \u00b6 The %runscript section defines the default action a container will perform when ran as an executable or with singularity run . This is configured during the build process. Application parameters or arguments If the runscript calls an application which takes parameters or arguments, include \"${@}\" after the application otherwise anything passed after the container name will be ignored by Singularity. Inspecting a container \u00b6 To display information about how a container was build, use the singularity inspect command. The -d option to this command will print the definition file used to built the container and the -r option will print the runscript (if added during build-time). For example: $ singularity inspect -d /data/containers/public/python3_helloworld.simg Bootstrap: docker From: ubuntu:20.04 %help Purpose: Test container to print \"Hello, World!\" in Python3. Author: ITS Research / QMUL. %post apt-get update apt-get install --yes python3 apt-get clean && \\ rm -rf /var/lib/apt/lists/* %test which python3 %runscript python3 -c 'print(\"Hello, World!\")' The singularity help inspect command provides additional options for inspecting the container. Reference \u00b6 Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Building containers"},{"location":"Tools/Singularity/Building_containers/#building-containers","text":"Singularity containers are built from a definition file which allows the container to be built identically by anyone possessing the file. Root privileges required to build a container Note that the process of building a container requires elevated privileges One primary task per container HPC containers are designed to perform one primary task, and should consist of a main application and its dependencies, in a similar way to how module files are provided. Since containers are lightweight, you can use separate containers instead of general purpose containers containing a collection of applications. This improves supportability, performance and reproducibility.","title":"Building containers"},{"location":"Tools/Singularity/Building_containers/#building-a-singularity-container-from-scratch","text":"Building from scratch gives complete control over the contents of the container, including operating system and packages. Certain packages may only be available for a specific version of Linux (i.e. compatibility issues) so being able to build a container from scratch enhances research capability. The following example demonstrates building an Ubuntu 20 (focal) container using definition file ubuntu20_helloworld.def that installs the python3 package via the Ubuntu package manager: BootStrap: debootstrap OSVersion: focal MirrorURL: http://us.archive.ubuntu.com/ubuntu/ %post apt-get install --yes python3 %runscript python3 \"${@}\" The build process is unattended, and will not succeed if any operations require interactive input. Be sure to use -y or --yes options when installing packages. Create the image (this step requires root privileges): sudo singularity build ubuntu20_helloworld.simg ubuntu20_helloworld.def This will result in a usable image in the current working directory. Be aware that if you want a very specific version of package from a repository, that package may not be available in future, so where possible, try to future-proof your containers.","title":"Building a Singularity container from scratch"},{"location":"Tools/Singularity/Building_containers/#building-containers-for-other-linux-distributions","text":"You may build Ubuntu images using CentOS and vice versa. However to bootstrap, you will need extra packages on the host OS to build the container. CentOS hosts require the debootstrap package to create Ubuntu containers, and Ubuntu hosts require the yum package to build CentOS containers. Alternatively you may create containers from an existing Singularity or Docker image, as explained in the following section. Since this method builds upon pre-built images, the debootstrap or yum packages are not required. Using LTS for Ubuntu definitions When building an Ubuntu container we recommend that you use a release with long term support (LTS release). Non-LTS Ubuntu releases have very limited support cycles which may lead to difficulties downloading packages if used after their end-of-life date.","title":"Building containers for other Linux distributions"},{"location":"Tools/Singularity/Building_containers/#building-containers-from-an-existing-base-image","text":"This enables you to either build or use an existing container as a base image to build other containers. Base images must be built first if part of a dependency chain and is no longer required once all dependent containers have been built.","title":"Building containers from an existing base image"},{"location":"Tools/Singularity/Building_containers/#singularity-local-images","text":"The following example demonstrates the creation of a local base Ubuntu 20 (focal) image using definition file ubuntu20_base.def , and then creating another container with python3 installed, using the local base image: BootStrap: debootstrap OSVersion: focal MirrorURL: http://us.archive.ubuntu.com/ubuntu/ Create the base image: sudo singularity build ubuntu20_base.simg ubuntu20_base.def The non-base image container (i.e. python3 in this example) can be built using definition file ubuntu20_python3.def : Bootstrap: localimage From: ubuntu20_base.simg %post apt-get install --yes python3 %runscript python3 \"${@}\" The result will be a container almost identical to the one created from scratch. sudo singularity build ubuntu20_python3.simg ubuntu20_python3.def","title":"Singularity local images"},{"location":"Tools/Singularity/Building_containers/#docker-images","text":"You can also bootstrap from Docker containers, although if supplied by a third party, you have less visibility or control over these images, so use with caution, as this may impact the future reproducibility of results. The below example demonstrates installing the python3 package within an Ubuntu 20 (focal) container using definition file ubuntu20_docker_python3.def , which imports the ubuntu:20.04 base container available on the Docker Hub: Bootstrap: docker From: ubuntu:20.04 %post apt-get update apt-get install --yes python3 %runscript python3 \"${@}\" Build the container. This will produce a container similar to the previous examples, but may vary slightly in overall size depending on packages installed in the base docker image: sudo singularity build ubuntu20_docker_python3.simg ubuntu20_docker_python3.def","title":"Docker images"},{"location":"Tools/Singularity/Building_containers/#future-proofing-your-containers","text":"When building your own containers, be sure to make them portable and future-proof. Consider whether the container will still build and produce the same results if the OS release or application version changes. If copying files from a working directory as part of setup is unavoidable, ensure that any files copied from the working directory are are available for others to download (i.e. in a git repository if not large). Perform all setup as part of the build process. If any manual steps are performed after the container is built, they should be integrated within the definition file, and the container rebuilt. Consider if the ability to rebuild your container will be impacted by package updates, or deprecation of old releases. Legacy versions of CentOS applications Outdated minor CentOS releases are moved from the main CentOS servers to vault.centos.org. If you need to use a specific Operating System or application version other than the latest, you need to future-proof your container by using the CentOS vault.","title":"Future-proofing your containers"},{"location":"Tools/Singularity/Building_containers/#definition-file-sections","text":"The following example definition file demonstrates commonly used definition file sections: %help %post %environment %test %runscript","title":"Definition file sections"},{"location":"Tools/Singularity/Building_containers/#help-section","text":"The %help section is designed to provide information about the container when singularity run-help is run on the container, for example: $ singularity run-help /data/containers/public/python3_helloworld.simg Purpose: Test container to print \"Hello, World!\" in Python3. Author: ITS Research / QMUL.","title":"Help section"},{"location":"Tools/Singularity/Building_containers/#post-section","text":"The %post section contains the commands used to build the container, such as package installs, file downloads, compilation and software configuration.","title":"Post section"},{"location":"Tools/Singularity/Building_containers/#environment-section","text":"Environment settings supplied at build-time in the %post section are only set during build-time and are not available at run-time. Environment settings which need to be available at run-time should be added to the %environment section.","title":"Environment section"},{"location":"Tools/Singularity/Building_containers/#test-section","text":"The %test section defines a set of commands or tests which should be run to validate the container has been built successfully. Some example tests include: installed binaries are available on the PATH variable --help or --version parameter for binaries (if supported) libraries, header files and man pages exist All tests will be run during the build process, after %post has completed. To build a container without running the tests, pass the -T or --notest option to the singularity build command. To run the tests for an existing container, run the singularity test command, for example: $ singularity test /data/containers/public/python3_helloworld.simg /usr/bin/python3","title":"Test section"},{"location":"Tools/Singularity/Building_containers/#runscript-section","text":"The %runscript section defines the default action a container will perform when ran as an executable or with singularity run . This is configured during the build process. Application parameters or arguments If the runscript calls an application which takes parameters or arguments, include \"${@}\" after the application otherwise anything passed after the container name will be ignored by Singularity.","title":"Runscript section"},{"location":"Tools/Singularity/Building_containers/#inspecting-a-container","text":"To display information about how a container was build, use the singularity inspect command. The -d option to this command will print the definition file used to built the container and the -r option will print the runscript (if added during build-time). For example: $ singularity inspect -d /data/containers/public/python3_helloworld.simg Bootstrap: docker From: ubuntu:20.04 %help Purpose: Test container to print \"Hello, World!\" in Python3. Author: ITS Research / QMUL. %post apt-get update apt-get install --yes python3 apt-get clean && \\ rm -rf /var/lib/apt/lists/* %test which python3 %runscript python3 -c 'print(\"Hello, World!\")' The singularity help inspect command provides additional options for inspecting the container.","title":"Inspecting a container"},{"location":"Tools/Singularity/Building_containers/#reference","text":"Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Reference"},{"location":"Tools/Singularity/Overview/","text":"Singularity containers \u00b6 Linux containers are self-contained execution environments that share a Linux kernel with the host, but have isolated resources for CPU, I/O, memory, etc. A container can run a completely different Linux environment, without the overhead required by virtual machines. Benefits of containers \u00b6 Reproducible science - containers can include an application and its dependencies, and be run on other systems where Singularity is installed. Version independent - run code designed for other versions of Linux e.g. Ubuntu packages on a CentOS system. Self-contained - allow isolation of complicated application installs. Singularity \u00b6 Singularity is a popular Open Source container solution designed for HPC. Unlike other container solutions such as Docker , it allows utilisation of GPUs and Infiniband interconnects for MPI jobs, and does not allow privilege escalation within a container, which would compromise the security in a multi-user environment with a shared filesystem. Using Singularity on the bbgcluster \u00b6 Singularity is available as a system package on the bbgcluster. We may update the version of Singularity installed on the cluster to address security vulnerabilities or to provide extra features as they become available. Recently, the default version of Singularity has been changed to singularity v3 , although Singularity v2 can still be used with the command singularity2 . Resources \u00b6 Containers built by ITS Research are stored in /data/containers and are supported in a similar way to the globally available supported applications. Applications installed within Singularity containers may also be provided as a module to abstract the container invocation commands. See the Singularity usage page for more information about containers provided as modules. Further reading \u00b6 Singularity website Running singularity help and singularity CMD help (replace CMD with a Singularity command, such as run ) Viewing the \"singularity\" manual page Reference \u00b6 Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Overview"},{"location":"Tools/Singularity/Overview/#singularity-containers","text":"Linux containers are self-contained execution environments that share a Linux kernel with the host, but have isolated resources for CPU, I/O, memory, etc. A container can run a completely different Linux environment, without the overhead required by virtual machines.","title":"Singularity containers"},{"location":"Tools/Singularity/Overview/#benefits-of-containers","text":"Reproducible science - containers can include an application and its dependencies, and be run on other systems where Singularity is installed. Version independent - run code designed for other versions of Linux e.g. Ubuntu packages on a CentOS system. Self-contained - allow isolation of complicated application installs.","title":"Benefits of containers"},{"location":"Tools/Singularity/Overview/#singularity","text":"Singularity is a popular Open Source container solution designed for HPC. Unlike other container solutions such as Docker , it allows utilisation of GPUs and Infiniband interconnects for MPI jobs, and does not allow privilege escalation within a container, which would compromise the security in a multi-user environment with a shared filesystem.","title":"Singularity"},{"location":"Tools/Singularity/Overview/#using-singularity-on-the-bbgcluster","text":"Singularity is available as a system package on the bbgcluster. We may update the version of Singularity installed on the cluster to address security vulnerabilities or to provide extra features as they become available. Recently, the default version of Singularity has been changed to singularity v3 , although Singularity v2 can still be used with the command singularity2 .","title":"Using Singularity on the bbgcluster"},{"location":"Tools/Singularity/Overview/#resources","text":"Containers built by ITS Research are stored in /data/containers and are supported in a similar way to the globally available supported applications. Applications installed within Singularity containers may also be provided as a module to abstract the container invocation commands. See the Singularity usage page for more information about containers provided as modules.","title":"Resources"},{"location":"Tools/Singularity/Overview/#further-reading","text":"Singularity website Running singularity help and singularity CMD help (replace CMD with a Singularity command, such as run ) Viewing the \"singularity\" manual page","title":"Further reading"},{"location":"Tools/Singularity/Overview/#reference","text":"Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Reference"},{"location":"Tools/Singularity/Using_containers/","text":"Using containers \u00b6 Running commands inside a container \u00b6 The singularity exec command will allow you to execute any program within a given container. The singularity run command performs the action defined by the %runscript section, which is the primary task of the container. Using the singularity run command is the simpler approach for job submissions. You can even \"execute\" a container, which performs the same action as the singularity run command. For example, the following demonstrates how to inspect the runscript and execute the /data/containers/public/python3_helloworld.simg container: $ singularity inspect -r /data/containers/public/python3_helloworld.simg #!/bin/sh python3 -c 'print(\"Hello, World!\")' $ /data/containers/public/python3_helloworld.simg Hello, World! $ singularity run /data/containers/public/python3_helloworld.simg Hello, World! Execute a script from outside the container \u00b6 Using on the cluster For typical use, you want to use the singularity run or singularity exec commands, especially when submitting the work via the scheduler. The following example runs a python script hello_world2.py from the current directory using the /data/containers/public/python3_helloworld.simg container: $ singularity exec /data/containers/public/python3_helloworld.simg python3 ./hello_world2.py Hello, World! Hello, World ( again ) ! The file hello_world2.py contains the following code: print ( \"Hello, World!\" ) print ( \"Hello, World (again)!\" ) If command singularity exec was replaced by singularity run , the runscript would be called, ignoring any parameters after the container name. Customised Environments While we encourage users to customise their environment to make their workflow easier, please be aware that customisations which change the user's environment for example by setting variables in the ~/.bash_profile file, or by using python's pip to create a ~/.local folder, may cause problems with Singularity which can be difficult to troubleshoot. Using containers with Grid Engine \u00b6 One of the major benefits of Singularity is the simplicity with which it can be used in an HPC environment. Your Grid Engine submission script may not require any modules loading to run your container. The resource requirements should be very similar to native code. Simple example \u00b6 #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G singularity run /data/containers/public/python3_helloworld.simg Modules example \u00b6 Applications installed within Singularity containers may also be provided as a module to abstract the container invocation commands ( singularity run and singularity exec ). In these cases, the container name will match the runscript command. For example, to use Pandoc as a module, simply load the pandoc module to use the application. #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G module load pandoc pandoc --help Shell access to the container \u00b6 It is possible to launch a shell within the container using the shell command. Interacting directly with a shell inside the container can be useful for code debugging and running multiple commands in a single interactive session, as an alternative to writing a single script. Below demonstrates how to invoke python3 from inside the /data/containers/public/python3_helloworld.simg container using an interactive shell: $ singularity shell /data/containers/public/python3_helloworld.simg Singularity> python3 Python 3 .8.10 ( default, Sep 28 2021 , 16 :10:42 ) [ GCC 9 .3.0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> Documentation is available on the Singularity Hub Wiki Running containers from external sources \u00b6 Use of external containers for Research For long term reproducibility of containers, we recommend that you build your own native Singularity containers from definition files instead of relying on 3rd party containers for your research. Using containers from external sources may produce undesirable results if the container is rebuilt after upstream changes such as updated or obsoleted packages. Containers created elsewhere can be copied or imported, and run on the cluster. The following example demonstrates how to import and run the latest Ubuntu official image stored in the Docker Hub : $ singularity pull ubuntu.simg docker://ubuntu:latest $ singularity exec ubuntu.simg cat /etc/lsb-release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 20 .04 DISTRIB_CODENAME = focal DISTRIB_DESCRIPTION = \"Ubuntu 20.04.3 LTS\" Reference \u00b6 Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Using containers"},{"location":"Tools/Singularity/Using_containers/#using-containers","text":"","title":"Using containers"},{"location":"Tools/Singularity/Using_containers/#running-commands-inside-a-container","text":"The singularity exec command will allow you to execute any program within a given container. The singularity run command performs the action defined by the %runscript section, which is the primary task of the container. Using the singularity run command is the simpler approach for job submissions. You can even \"execute\" a container, which performs the same action as the singularity run command. For example, the following demonstrates how to inspect the runscript and execute the /data/containers/public/python3_helloworld.simg container: $ singularity inspect -r /data/containers/public/python3_helloworld.simg #!/bin/sh python3 -c 'print(\"Hello, World!\")' $ /data/containers/public/python3_helloworld.simg Hello, World! $ singularity run /data/containers/public/python3_helloworld.simg Hello, World!","title":"Running commands inside a container"},{"location":"Tools/Singularity/Using_containers/#execute-a-script-from-outside-the-container","text":"Using on the cluster For typical use, you want to use the singularity run or singularity exec commands, especially when submitting the work via the scheduler. The following example runs a python script hello_world2.py from the current directory using the /data/containers/public/python3_helloworld.simg container: $ singularity exec /data/containers/public/python3_helloworld.simg python3 ./hello_world2.py Hello, World! Hello, World ( again ) ! The file hello_world2.py contains the following code: print ( \"Hello, World!\" ) print ( \"Hello, World (again)!\" ) If command singularity exec was replaced by singularity run , the runscript would be called, ignoring any parameters after the container name. Customised Environments While we encourage users to customise their environment to make their workflow easier, please be aware that customisations which change the user's environment for example by setting variables in the ~/.bash_profile file, or by using python's pip to create a ~/.local folder, may cause problems with Singularity which can be difficult to troubleshoot.","title":"Execute a script from outside the container"},{"location":"Tools/Singularity/Using_containers/#using-containers-with-grid-engine","text":"One of the major benefits of Singularity is the simplicity with which it can be used in an HPC environment. Your Grid Engine submission script may not require any modules loading to run your container. The resource requirements should be very similar to native code.","title":"Using containers with Grid Engine"},{"location":"Tools/Singularity/Using_containers/#simple-example","text":"#!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G singularity run /data/containers/public/python3_helloworld.simg","title":"Simple example"},{"location":"Tools/Singularity/Using_containers/#modules-example","text":"Applications installed within Singularity containers may also be provided as a module to abstract the container invocation commands ( singularity run and singularity exec ). In these cases, the container name will match the runscript command. For example, to use Pandoc as a module, simply load the pandoc module to use the application. #!/bin/bash #$ -cwd #$ -j y #$ -pe smp 1 #$ -l h_rt=1:0:0 #$ -l h_vmem=1G module load pandoc pandoc --help","title":"Modules example"},{"location":"Tools/Singularity/Using_containers/#shell-access-to-the-container","text":"It is possible to launch a shell within the container using the shell command. Interacting directly with a shell inside the container can be useful for code debugging and running multiple commands in a single interactive session, as an alternative to writing a single script. Below demonstrates how to invoke python3 from inside the /data/containers/public/python3_helloworld.simg container using an interactive shell: $ singularity shell /data/containers/public/python3_helloworld.simg Singularity> python3 Python 3 .8.10 ( default, Sep 28 2021 , 16 :10:42 ) [ GCC 9 .3.0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> Documentation is available on the Singularity Hub Wiki","title":"Shell access to the container"},{"location":"Tools/Singularity/Using_containers/#running-containers-from-external-sources","text":"Use of external containers for Research For long term reproducibility of containers, we recommend that you build your own native Singularity containers from definition files instead of relying on 3rd party containers for your research. Using containers from external sources may produce undesirable results if the container is rebuilt after upstream changes such as updated or obsoleted packages. Containers created elsewhere can be copied or imported, and run on the cluster. The following example demonstrates how to import and run the latest Ubuntu official image stored in the Docker Hub : $ singularity pull ubuntu.simg docker://ubuntu:latest $ singularity exec ubuntu.simg cat /etc/lsb-release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 20 .04 DISTRIB_CODENAME = focal DISTRIB_DESCRIPTION = \"Ubuntu 20.04.3 LTS\"","title":"Running containers from external sources"},{"location":"Tools/Singularity/Using_containers/#reference","text":"Jordi Deu-Pons Miguel Grau Carlos L\u00f3pez Elorduy","title":"Reference"},{"location":"Tools/VSCode/cluster_node/","text":"VSCode in interactive node \u00b6 Description \u00b6 These are the instructions to use Visual Studio Code to run and debug scripts/notebooks within an interactive node from the cluster. Requirements \u00b6 Conda or Mamba installed Have an account on ngrok Create a conda environment \u00b6 The conda environment must include the packages code-server , pyngrok and screen conda create -n vsc_node -c conda-forge code-server screen pyngrok -y conda activate vsc_node From now on, an interactive session must be opened and the rest of the commands will be executed within this session. interactive Run code server in a screen (inside the interactive session) \u00b6 screen -S vscode [ vscode screen ] conda activate vsc_node [ vscode screen ] code-server Exit the screen with Ctrl + A + D Run a Ngrok tunnel in a screen (inside the interactive session) \u00b6 Note If this is your first time doing this step, you'll first need to setup your authentification token for ngrok. Log in to your ngrok home page . On the left-hand side bar: Getting Started > Your Authtoken On the Command Line section, copy only the key , which is the big string with random letters and numbers. Go back to the terminanl in the cluster (with the vsc_pyngrok environment activated) and add your authentification token with the following command: ngrok authtoken <the_token_you_copied_in_the_previous_step> This setup only has to be done once. screen -S pyngrok [ pyngrok screen ] conda activate vsc_node [ pyngrok screen ] pyngrok http 8080 Copy the URL to your browser and exit the session Ctrl + A + D Check your VSCode password \u00b6 cat ~/.config/code-server/config.yaml Browse your VSCode remotely \u00b6 When entering the URL in your browser, click Visit site and introduce the password you obtained in the previous step in order to be able to use VSCode. Notes \u00b6 Warning With this process, within your interactive session, you will see with screen -ls that you have two screens working ( vscode and pyngrok ). Because of this, keep in mind that if the interactive session is closed at any point, the two screens will be killed as well , crashing any ongoing process. Reference \u00b6 Jordi Deu Pons Carlos L\u00f3pez Elorduy Federica Brando","title":"VSCode in interactive node"},{"location":"Tools/VSCode/cluster_node/#vscode-in-interactive-node","text":"","title":"VSCode in interactive node"},{"location":"Tools/VSCode/cluster_node/#description","text":"These are the instructions to use Visual Studio Code to run and debug scripts/notebooks within an interactive node from the cluster.","title":"Description"},{"location":"Tools/VSCode/cluster_node/#requirements","text":"Conda or Mamba installed Have an account on ngrok","title":"Requirements"},{"location":"Tools/VSCode/cluster_node/#create-a-conda-environment","text":"The conda environment must include the packages code-server , pyngrok and screen conda create -n vsc_node -c conda-forge code-server screen pyngrok -y conda activate vsc_node From now on, an interactive session must be opened and the rest of the commands will be executed within this session. interactive","title":"Create a conda environment"},{"location":"Tools/VSCode/cluster_node/#run-code-server-in-a-screen-inside-the-interactive-session","text":"screen -S vscode [ vscode screen ] conda activate vsc_node [ vscode screen ] code-server Exit the screen with Ctrl + A + D","title":"Run code server in a screen (inside the interactive session)"},{"location":"Tools/VSCode/cluster_node/#run-a-ngrok-tunnel-in-a-screen-inside-the-interactive-session","text":"Note If this is your first time doing this step, you'll first need to setup your authentification token for ngrok. Log in to your ngrok home page . On the left-hand side bar: Getting Started > Your Authtoken On the Command Line section, copy only the key , which is the big string with random letters and numbers. Go back to the terminanl in the cluster (with the vsc_pyngrok environment activated) and add your authentification token with the following command: ngrok authtoken <the_token_you_copied_in_the_previous_step> This setup only has to be done once. screen -S pyngrok [ pyngrok screen ] conda activate vsc_node [ pyngrok screen ] pyngrok http 8080 Copy the URL to your browser and exit the session Ctrl + A + D","title":"Run a Ngrok tunnel in a screen (inside the interactive session)"},{"location":"Tools/VSCode/cluster_node/#check-your-vscode-password","text":"cat ~/.config/code-server/config.yaml","title":"Check your VSCode password"},{"location":"Tools/VSCode/cluster_node/#browse-your-vscode-remotely","text":"When entering the URL in your browser, click Visit site and introduce the password you obtained in the previous step in order to be able to use VSCode.","title":"Browse your VSCode remotely"},{"location":"Tools/VSCode/cluster_node/#notes","text":"Warning With this process, within your interactive session, you will see with screen -ls that you have two screens working ( vscode and pyngrok ). Because of this, keep in mind that if the interactive session is closed at any point, the two screens will be killed as well , crashing any ongoing process.","title":"Notes"},{"location":"Tools/VSCode/cluster_node/#reference","text":"Jordi Deu Pons Carlos L\u00f3pez Elorduy Federica Brando","title":"Reference"}]}