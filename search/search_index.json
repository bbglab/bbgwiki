{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-bbg-wiki","title":"Welcome to the BBG-Wiki!","text":"<p>This website is meant to include information of all the tools and data used by the bbglab team, so that it serves both as a guide to understand them and as a place where to find information about everything.</p>"},{"location":"Edit_BBG-Wiki/","title":"Edit BBG-Wiki","text":"<p>The main language of the wiki documentation is Markdown. There are several online editors which can help writting Markdown text and automatically visualize what is being written.</p> <ul> <li>StackEdit</li> <li>Editor.md</li> </ul> <p>This wiki is stored in a GitHub repository, where each section of the wiki corresponds to a single Markdown file (<code>*.md</code>). By editing these files either online or locally, the wiki can be updated by everyone.</p> <ul> <li>Markdown cheatsheet</li> </ul>"},{"location":"Edit_BBG-Wiki/#online","title":"Online","text":"<p>Go to the bbg-wiki repository and edit any file inside the <code>docs/</code> folder, which contains all the files of the documentation.</p>"},{"location":"Edit_BBG-Wiki/#local","title":"Local","text":""},{"location":"Edit_BBG-Wiki/#installation","title":"Installation","text":"<pre><code>git clone git@github.com:bbglab/bbgwiki.git\npip install -r bbgwiki/requirements.txt\n</code></pre>  <p>Error: My Github password seems to be wrong somehow...</p> <p>It might be the case that at some point of this process, it asks for the Github user and password. However, although you should introduce your Github user, the password that it asks is not your Github password. In order to know what to introduce here, you need to generate a <code>ssh key</code> following one of these two options:</p> <ul> <li> <p>From the Github web:</p> <ul> <li>Go to Github and login</li> <li>Click on your profile on the top right</li> <li>Settings &gt; Developer settings (bottom option of the left bar) &gt; Personal access tokens &gt; Generate new token</li> <li>Introduce your Github password</li> <li>Check all the boxes of the checklist</li> <li>Click \"Generate token\".</li> <li>Copy the generated key (looks like a bunch of random letters) and paste it in your terminal where it previously asked for the password.</li> </ul> </li> <li> <p>From the terminal:</p> <ul> <li>Execute the command:</li> </ul> <pre><code>ssh-keygen -o -t rsa -C \u201cssh@github.com\u201d\n</code></pre> <ul> <li>Click \"Enter\" on all the options (unless you want to save the key in a specific file, but it is not mandatory)</li> <li>Execute the next command to see the generated key (if you selected a specific file, change the <code>id_rsa</code> in the command by the name you inputed).</li> </ul> <pre><code>cat id_rsa.pub\n</code></pre> <ul> <li>Copy the output and paste it in your terminal where it previously asked for the password.</li> </ul> </li> </ul>"},{"location":"Edit_BBG-Wiki/#commands","title":"Commands","text":"<p>Running at localhost (to try stuff before updating the main web)</p> <pre><code>mkdocs serve\n</code></pre> <p>Update web:</p> <pre><code>git add &lt;edited file or directory&gt;\ngit commit -m \"Message\"\ngit push\n</code></pre>"},{"location":"Edit_BBG-Wiki/#references","title":"References","text":"<ul> <li>Carlos L\u00f3pez Elorduy</li> </ul>"},{"location":"Cluster_basics/Backups/","title":"Backups","text":""},{"location":"Cluster_basics/Backups/#description","title":"Description","text":""},{"location":"Cluster_basics/Backups/#reference","title":"Reference","text":""},{"location":"Cluster_basics/Headers/","title":"Headers","text":""},{"location":"Cluster_basics/Headers/#description","title":"Description","text":"<p>When you are in the cluster, in order to visualize the column names from a file with a table, you can use the command: <pre><code>headers name_file.tsv\n</code></pre></p> <p>This will return you the name of the columns with the number of the column, for example:</p> <pre><code>1   tumor_type\n2   gene\n3   chr\n4   pos\n5   ref\n6   alt\n</code></pre>"},{"location":"Cluster_basics/Headers/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Paula Gomis </li> </ul>"},{"location":"Cluster_basics/Interactive/","title":"Interactive","text":"<p>The <code>interactive</code> command gives to the user an interactive shell in the cluster with slurm allocation. In other words, it allocates the user to a specific node of the cluster so that the jobs can be executed there without disturbing the rest of the users.</p>"},{"location":"Cluster_basics/Interactive/#usage","title":"Usage","text":"<p>Once you enter the bbgcluster, you will see in the terminal <code>&lt;username&gt;@login01</code>. It is here where, if you want to be allocated to your own node, you can just run the command:</p> <pre><code>$ interactive\nsalloc: Granted job allocation *******\n</code></pre> <p>If the <code>login01</code> has changed to <code>bbgn###</code> where <code>###</code> is the number identifying the current node.</p> <p>Apart from the basic use, there are optional arguments/flags for extra features:</p> <pre><code>interactive [-c] [-m] [-w] [-J] [-x]\n</code></pre> <ul> <li><code>-c</code>: Number of CPU cores (default: 1)</li> <li><code>-m</code>: Total amount of memory (GB) (default: 8 [GB])</li> <li><code>-w</code>: Target node</li> <li><code>-J</code>: Job name</li> <li><code>-x</code>: Binary that you want to run interactively</li> </ul>"},{"location":"Cluster_basics/Interactive/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> <li>Carlos L\u00f3pez Elorduy</li> </ul>"},{"location":"Cluster_basics/NewFolders/","title":"New folder in workspace","text":""},{"location":"Cluster_basics/NewFolders/#description","title":"Description","text":"<p>Appart from your own personal folder, there are four main shared folders within the <code>/workspace</code> folder in the cluster. These are:</p> <ul> <li>Projects: analysis/results files. Backup and snapshots. High safe.</li> <li>Datasets: data files downloaded from public/private repositories. Re-downloading is possible/straightforward. Backup. Medium safe.</li> <li>No backup: intermediate files generated during pipelines execution or big amount of data re-downloadable. Low safe.</li> <li>Datasafe: datasets generated by us or from collaborators, not in public repositories. Snapshots. High safe.</li> </ul> <p>If you want to create a new folder inside one of the previously mentioned, perform the following instructions:</p> <ol> <li>Go to the bbgdashboard</li> <li>Log in (or check that you are already logged in)</li> <li> <p>Go to the <code>Cluster</code> tab.</p>  </li> <li> <p>Click on one of the four options where you want to create your folder.</p>  </li> <li> <p>Write the title and a description of the new folder and click \"OK\".</p>  </li> </ol>"},{"location":"Cluster_basics/NewFolders/#possible-errors","title":"Possible errors","text":"<p>If after clicking the \"OK\" button an ERROR message is displayed:</p> <ul> <li>Make sure that you are logged in in the dashboard itself.</li> <li>Try doing everything from an incognito window.</li> </ul>"},{"location":"Cluster_basics/NewFolders/#reference","title":"Reference","text":"<ul> <li>Carlos L\u00f3pez Elorduy</li> <li>Miguel Grau</li> <li>Jordi Deu-Pons</li> </ul>"},{"location":"Cluster_basics/Notebooks_in_cluster/","title":"Running notebooks in the cluster","text":""},{"location":"Cluster_basics/Notebooks_in_cluster/#description","title":"Description","text":"<p>Running a jupyter notebook in the cluster allows you to work with a notebook which will be running even if you disconnect from the cluster.</p> <p>This is especially useful for time-consuming/memory-consuming processes or notebooks with a high number of variables/packages needed, so that you have more computational power than your local computer, you can leave them running in the background without the fear of accidentally disconnecting and losing all the progress and you can come back to a notebook without the need of loading all the variables/packages again.</p> <p>To run a notebook in the cluster, a screen and an interactive will be used.</p>"},{"location":"Cluster_basics/Notebooks_in_cluster/#usage","title":"Usage","text":"<p>You will need to follow the next steps:</p> <p>Connect to the cluster:</p> <pre><code>ssh -p 22022 &lt;username&gt;@bbgcluster\n</code></pre> <p>Open a screen:</p> <pre><code>&lt;username&gt;@login01:~$ screen -S &lt;screen_name&gt;\n</code></pre> <p>Run an interactive job:</p> <pre><code>[screen_name] &lt;username&gt;@login01:~$ interactive\n</code></pre>  <p>Note</p> <p>If your notebook needs more than 8G and 2 cores, you can specify it here -- see interactive section.</p>  <p>Activate conda base or the conda environment that you need in your notebook:</p> <pre><code>[screen_name] &lt;username&gt;@bbgn005:~$ conda activate\n</code></pre> <p>Go to the folder that you wish to run the notebook:</p> <pre><code>(base)[screen_name] &lt;username&gt;@bbgn005:~$ cd /workspace/folder\n</code></pre> <p>Run the jupyter notebook:</p> <pre><code>(base)[screen_name] &lt;username&gt;@bbgn005:~/workspace/folder$ unset XDG_RUNTIME_DIR &amp;&amp; jupyter notebook --ip=0.0.0.0\n</code></pre> <p>Keep the URL with the token and the node in which the interactive is running:</p> <pre><code>[I 10:37:20.371 NotebookApp] The Jupyter Notebook is running at: http://127.0.0.1:8888/?token=730ea7a95c02207c9fb7cbd434c2de81e03168845d42c23c\n</code></pre> <p>Now, your notebook is running and you can dettach from the screen:</p> <pre><code>Ctrl + A -&gt; D\n</code></pre> <p>Open a new terminal and create an ssh tunnel to be able to access the port 8888 in the node -- following the example, this is node bbgn005:</p> <pre><code>ssh -L 8888:bbgn005:8888 -p 22022 &lt;username&gt;@bbgcluster\n</code></pre> <p>Now use the URL, replacing 127.0.0.1 with localhost and open the URL in your browser:</p> <pre><code>http://localhost:8888/?token=730ea7a95c02207c9fb7cbd434c2de81e03168845d42c23c\n</code></pre> <p>Using the tunnel (ssh -L terminal) and the URL in the browser, you can enter the notebook as many times as you need. When you don't need the notebook to continue running in the cluster, reconnect to the screen:</p> <pre><code>screen -r &lt;screen_name&gt;\n</code></pre> <p>And kill jupyter and exit the interactive session.</p>"},{"location":"Cluster_basics/Notebooks_in_cluster/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> <li>Carlos L\u00f3pez</li> <li>Ferran Mui\u00f1os</li> <li>Paula Gomis</li> </ul>"},{"location":"Cluster_basics/Screen/","title":"Screen","text":""},{"location":"Cluster_basics/Screen/#description","title":"Description","text":"<p>The <code>screen</code> command opens a session which will be running even if you disconnect from the cluster.</p> <p>This is especially useful for time-consuming processes, so that you can leave them running in the background without the fear of accidentally disconnecting and losing all the progress.</p> <p>You can also open several screens for different processes, which you can detach and attach to them as you like.</p>"},{"location":"Cluster_basics/Screen/#basic-commands","title":"Basic commands","text":""},{"location":"Cluster_basics/Screen/#new-screen","title":"New screen","text":"<p>Creates a new screen with name \"custom_name\".</p> <pre><code>screen -S &lt;custom_name&gt;\n</code></pre>  <p>Warning</p> <p>When opening a new screen, this should be done from the <code>login01</code> node, since this guarantees that the screen will be constantly running and not shut down (which could happen if the screen is opened in one of the other nodes).</p>"},{"location":"Cluster_basics/Screen/#list-screens","title":"List screens","text":"<p>List all the created screens.</p> <pre><code>screen -ls\n</code></pre>"},{"location":"Cluster_basics/Screen/#detach","title":"Detach","text":"<p>Detaches from a screen</p> <pre><code>Ctrl + A -&gt; D\n</code></pre>"},{"location":"Cluster_basics/Screen/#re-attach","title":"Re-attach","text":"<p>Re-attaches to a detached screen.</p> <pre><code>screen -r [#]\n</code></pre>  <p>Note</p> <p>If there are multiple screens available, include the number of the screen id (or name) to identify which screen to re-attach.</p>"},{"location":"Cluster_basics/Screen/#exit-and-kill-screen","title":"Exit and kill screen","text":"<pre><code>exit\n</code></pre>"},{"location":"Cluster_basics/Screen/#kill-a-detached-screen","title":"Kill a detached screen","text":"<pre><code>screen -X -S [screen number ID or name] quit\n</code></pre>"},{"location":"Cluster_basics/Screen/#kill-all-screens","title":"Kill all screens","text":"<pre><code>pkill screen\n</code></pre>"},{"location":"Cluster_basics/Screen/#documentation","title":"Documentation","text":"<p>For a more extensive list of commands, check the screen cheatsheet.</p> <p>You can also check the full documentation.</p>"},{"location":"Cluster_basics/Screen/#reference","title":"Reference","text":"<ul> <li>Carlos L\u00f3pez Elorduy</li> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> </ul>"},{"location":"Cluster_basics/Structure/","title":"Structure","text":""},{"location":"Cluster_basics/Structure/#description","title":"Description","text":"<p>The workspace is organized in several folders, each of them with different purposes and different security backups. </p> <ul> <li>Projects : Files from analysis or results obtained in the projects. It has backups and snapshots so it is highly safe.</li> <li>Datasets : Data files that have been downloaded from public or private repositories and re-downloading the is possible or straightforward. It only has backups, so it is medium safe.</li> <li>No backup : Intermediate files that have been generated during pipelines execution or big amounts of data that is re-downloadable. It is lowly safe.</li> <li>Datasafe : Datasets that have been generated by us or from collaborators, and it is not in public repositories. It has Snapshots and it is highly safe.</li> </ul>"},{"location":"Cluster_basics/Structure/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> </ul>"},{"location":"Cluster_basics/Submitting_jobs/Qmap/","title":"Qmap Submit","text":""},{"location":"Cluster_basics/Submitting_jobs/Qmap/#description","title":"Description","text":"<p>How to submit jobs to the Cluster using Qmap.</p> <p>Qmap documentation: https://qmap.readthedocs.io</p>"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#howto","title":"Howto","text":""},{"location":"Cluster_basics/Submitting_jobs/Qmap/#1-prepare-qmap-file-example","title":"1. Prepare .qmap file (example)","text":"<pre><code>[params]\nmemory=50G\n\n[pre]\n . \"/home/$USER/miniconda3/etc/profile.d/conda.sh\"\nconda activate sciclone-env\n\n[jobs]\nRscript run.R ../data/vafs.dat bmm 3 ./results.beta.3\nRscript run.R ../data/vafs.dat gaussian.bmm 3 ./results.gaussian.3\nRscript run.R ../data/vafs.dat binomial.bmm 3 ./results.binomial.3\n</code></pre>"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#2-run-qmap-submit-from-the-login-node","title":"2. Run \"qmap submit\" from the login node","text":"<pre><code>$ qmap submit filename.qmap\n</code></pre>"},{"location":"Cluster_basics/Submitting_jobs/Qmap/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> </ul>"},{"location":"Cluster_basics/Submitting_jobs/SLURM/","title":"SLURM","text":""},{"location":"Cluster_basics/Submitting_jobs/SLURM/#description","title":"Description","text":""},{"location":"Cluster_basics/Submitting_jobs/SLURM/#reference","title":"Reference","text":""},{"location":"Datasets/General_datasets/BeatAML/","title":"BeatAML","text":""},{"location":"Datasets/General_datasets/BeatAML/#description","title":"Description","text":""},{"location":"Datasets/General_datasets/BeatAML/#reference","title":"Reference","text":""},{"location":"Datasets/General_datasets/CGCI/","title":"CGCI","text":""},{"location":"Datasets/General_datasets/CGCI/#description","title":"Description","text":""},{"location":"Datasets/General_datasets/CGCI/#reference","title":"Reference","text":""},{"location":"Datasets/General_datasets/CPTAC/","title":"CPTAC","text":""},{"location":"Datasets/General_datasets/CPTAC/#description","title":"Description","text":""},{"location":"Datasets/General_datasets/CPTAC/#data-access","title":"Data access","text":"<p>Website</p>"},{"location":"Datasets/General_datasets/CPTAC/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":""},{"location":"Datasets/General_datasets/CPTAC/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> </ul>"},{"location":"Datasets/General_datasets/GENIE/","title":"GENIE","text":""},{"location":"Datasets/General_datasets/GENIE/#description","title":"Description","text":""},{"location":"Datasets/General_datasets/GENIE/#reference","title":"Reference","text":""},{"location":"Datasets/General_datasets/Hartwig/","title":"Hartwig","text":""},{"location":"Datasets/General_datasets/Hartwig/#description","title":"Description","text":"<p>Hartwig Medical Database stores the genetic and clinical data of thousands of patients in the Netherlands with metastatic cancer. The genetic data are generated using OncoAct. </p> <p>It is the largest database of metastatic tumor data obtained with WGS in the world, including WGS data of over 5000 patients. It combines genetic data with treatment and treatment outcome data.  </p>"},{"location":"Datasets/General_datasets/Hartwig/#data-access","title":"Data access","text":"<p>You can find the data from Hartwig Medical Foundation Database in the folder: <pre><code>/workspace/datasets/hartwig\n</code></pre></p> <p>You can find clinical data from the patients in Hartwig in the following file: <pre><code>/workspace/datasets/hartwig/20220809/biomarkers/tmp/clinical_ready.csv\n</code></pre></p> <p>A more complete version of the previous table can be found in:</p> <pre><code>/workspace/datasets/hartwig/20220809/biomarkers/clean/biomarkers_AdjTPM.csv\n</code></pre>  <p>Permission</p> <p>To use data from Hartwig Medical Foundation Database you need special permission. Contact Martina or Paula if you need to use this data. </p>   <p>Website</p> <p>https://www.hartwigmedicalfoundation.nl/en/data/database/</p>"},{"location":"Datasets/General_datasets/Hartwig/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>Researchers making use of data provided by Hartwig Medical Foundation must acknowledge this in every publication, by using at least the text below:</p>  <p>This publication and the underlying research are partly facilitated by Hartwig Medical Foundation and the Center for Personalized Cancer Treatment (CPCT) which have generated, analysed and made available data for this research.</p>  <p>Read this document to learn more about how to cite Hartwig Medical Foundation Database.</p>"},{"location":"Datasets/General_datasets/Hartwig/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> <li>Joseph USSET</li> </ul>"},{"location":"Datasets/General_datasets/ICGC/","title":"ICGC","text":""},{"location":"Datasets/General_datasets/ICGC/#description","title":"Description","text":"<p>The International Cancer Genome Consortium (ICGC) is a global initiative to build a comprehensive catalog of mutational abnormalities in the major tumor types. ICGC\u2019s Data Portal is a user-friendly platform for efficient visualization, analysis and interpretation of large, diverse cancer datasets. </p> <p>The portal currently contains data from 84 worldwide cancer projects, collectively representing about 77 million somatic mutations and molecular data from over 20,000 contributors.</p> <p>The ICGC Data Portal provides many tools for visualizing, querying, and downloading cancer data, which is released on a quarterly schedule.</p>"},{"location":"Datasets/General_datasets/ICGC/#data-access","title":"Data access","text":"<p>You can find the data from ICGC in the folder: </p>  <p>Website</p> <p>https://dcc.icgc.org</p>"},{"location":"Datasets/General_datasets/ICGC/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>To cite the ICGC 25K Data Portal, please cite this publication:</p>  <ul> <li>Zhang J, Bajari R, Andric D, et al. The International Cancer Genome Consortium Data Portal. Nat Biotechnol. 2019;37(4):367\u2010369. doi:10.1038/s41587-019-0055-9</li> </ul>"},{"location":"Datasets/General_datasets/ICGC/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> </ul>"},{"location":"Datasets/General_datasets/PCAWG/","title":"PCAWG","text":""},{"location":"Datasets/General_datasets/PCAWG/#description","title":"Description","text":"<p>The Pan-Cancer Analysis of Whole Genomes (PCAWG) study is an international collaboration to identify common patterns of mutation in more than 2,600 cancer whole genomes from the International Cancer Genome Consortium.</p> <p>Building upon previous work which examined cancer coding regions (Cancer Genome Atlas Research Network, The Cancer Genome Atlas Pan-Cancer analysis project), this project explored the nature and consequences of somatic and germline variations in both coding and non-coding regions, with specific emphasis on cis-regulatory sites, non-coding RNAs, and large-scale structural alterations.</p>"},{"location":"Datasets/General_datasets/PCAWG/#data-access","title":"Data access","text":"<p>You can find the data from PCAWG in the folder:  <pre><code>/workspace/datasets/intogen_datasets/genomes/pcawg_20160110/filtered\n</code></pre></p> <p>You can find clinical data from samples from PCAWG in the file: <pre><code>/workspace/datasets/intogen_datasets/genomes/pcawg_20160110/original_data/pcawg_donor_clinical_August2016_v9.csv\n</code></pre></p> <p>You can find clinical data from samples from Hartwig in the file: <pre><code>/workspace/datasets/intogen_datasets/genomes/pcawg_20160110/original_data/pcawg_specimen_histology_August2016_v9.csv\n</code></pre></p> <p>Additional data about ... from PCAWG is available in the folder (you will need special permission to use this data): <pre><code>/workspace/datasets/pcawg\n</code></pre></p>  <p>Website</p> <p>https://dcc.icgc.org/pcawg</p>"},{"location":"Datasets/General_datasets/PCAWG/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>When using this dataset, please cite reference: The ICGC/TCGA Pan-Cancer Analysis of Whole Genomes Network. Pan-cancer analysis of whole genomes. Nature (2020).</p> <p>Click here to learn more about how to cite PCAWG.</p>"},{"location":"Datasets/General_datasets/PCAWG/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> </ul>"},{"location":"Datasets/General_datasets/PedcBioPortal/","title":"PedcBioPortal","text":""},{"location":"Datasets/General_datasets/PedcBioPortal/#description","title":"Description","text":"<p>The PedcBioPortal for Childhood Cancer Genomics is an instance of cBioPortal supporting the curation and pan-cancer integration of public, pediatric cancer genomics data sets as well as 'open science' initiatives integrated within the Kids First Data Resource Center as well as data from consortia-based efforts including the Children's Brain Tumor Tissue Consortium (CBTTC), the Pediatric NeuroOncology Consortium (PNOC), the St. Baldrick Pediatric Stand Up 2 Cancer Dream Team, and the Pediatric Preclinical Testing Consortium (PPTC). </p>"},{"location":"Datasets/General_datasets/PedcBioPortal/#data-access","title":"Data access","text":"<p>Website</p>"},{"location":"Datasets/General_datasets/PedcBioPortal/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":""},{"location":"Datasets/General_datasets/PedcBioPortal/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> </ul>"},{"location":"Datasets/General_datasets/StJude/","title":"St. Jude","text":""},{"location":"Datasets/General_datasets/StJude/#description","title":"Description","text":"<p>In 2010, St. Jude Children\u2019s Research Hospital and Washington University School of Medicine launched a $65 million, three-year project (St. Jude\u2014Washington University Pediatric Cancer Genome Project) to define the genomic landscape of pediatric cancer, including some of the least understood and most challenging cancers, as an effort to discover the origins of pediatric cancer and seek new treatments. It included whole exome and whole transcriptome sequencing of an additional 1,200 patients, which included more than 20 different cancers.</p> <p>Click here to visualize the list of tumor types available in St. Jude Cloud. </p>"},{"location":"Datasets/General_datasets/StJude/#data-access","title":"Data access","text":"<p>You can find the data from St. Jude Cloud in the folder: <pre><code>/workspace/datasets/stjude\n</code></pre></p>  <p>Permission</p> <p>To use data from St. Jude  you need special permission. Contact Martina or Paula if you need to use this data. </p>   <p>Website</p> <p>https://www.stjude.cloud/studies/pediatric-cancer-genome-project/</p>"},{"location":"Datasets/General_datasets/StJude/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>Click here to learn how to cite St. Jude data.</p>"},{"location":"Datasets/General_datasets/StJude/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> </ul>"},{"location":"Datasets/General_datasets/StJudeLife/","title":"St. Jude LIFE","text":""},{"location":"Datasets/General_datasets/StJudeLife/#description","title":"Description","text":"<p>The objective of the St. Jude LIFE study is to establish a lifetime cohort of childhood cancer survivors to facilitate longitudinal clinical evaluation of health outcomes in aging adults surviving pediatric cancer.</p> <p>The main aims of the project are:</p> <ul> <li>determine prevalence and latency of late effects;</li> <li>identify multifactorial predictors of adverse outcomes;</li> <li>develop risk profiles for adverse health outcomes across the age spectrum; </li> <li>use data to guide health screening and risk-reducing interventions.</li> </ul> <p>Click here to visualize a complete report of the characteristics of the cohort from St. Jude LIFE. </p>"},{"location":"Datasets/General_datasets/StJudeLife/#data-access","title":"Data access","text":"<p>You can find the data from St. Jude LIFE in the folder: <pre><code>/workspace/datasets/stjudelife\n</code></pre></p>  <p>Website</p> <p>https://sjlife.stjude.org/</p>"},{"location":"Datasets/General_datasets/StJudeLife/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":""},{"location":"Datasets/General_datasets/StJudeLife/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> </ul>"},{"location":"Datasets/General_datasets/TARGET/","title":"TARGET","text":""},{"location":"Datasets/General_datasets/TARGET/#description","title":"Description","text":"<p>The Therapeutically Applicable Research to Generate Effective Treatments (TARGET) program applies a comprehensive genomic approach to determine molecular changes that drive childhood cancers. The goal of the program is to use data to guide the development of effective, less toxic therapies. </p>"},{"location":"Datasets/General_datasets/TARGET/#data-access","title":"Data access","text":"<p>You can find TARGET pediatric cancer data in the folder: </p>  <p>Website</p> <p>https://ocg.cancer.gov/programs/target</p>"},{"location":"Datasets/General_datasets/TARGET/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>Researchers making use of TARGET pediatric cancer data must acknowledge this in every publication, by using at least the text below:</p>  <p>\"The results published here are in whole or part based upon data generated by the Therapeutically Applicable Research to Generate Effective Treatments (https://ocg.cancer.gov/programs/target) initiative, phs000218. The data used for this analysis are available at https://portal.gdc.cancer.gov/projects. Information about TARGET can be found at http://ocg.cancer.gov/programs/target.\"</p>  <p>Click here to learn more about how to cite TARGET pediatric cancer data.</p>"},{"location":"Datasets/General_datasets/TARGET/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> </ul>"},{"location":"Datasets/General_datasets/TCGA/","title":"TCGA","text":""},{"location":"Datasets/General_datasets/TCGA/#description","title":"Description","text":"<p>The Cancer Genome Atlas (TCGA), a landmark cancer genomics program, molecularly characterized over 20,000 primary cancer and matched normal samples spanning 33 cancer types. This joint effort between NCI and the National Human Genome Research Institute began in 2006, bringing together researchers from diverse disciplines and multiple institutions.</p> <p>TCGA has generated over 2.5 petabytes of genomic, epigenomic, transcriptomic, and proteomic data. The data, which has already led to improvements in our ability to diagnose, treat, and prevent cancer, will remain publicly available for anyone in the research community to use.</p> <p>Click here to visualize the list of tumor types available in TCGA. For each cancer type, TCGA published an overview of the characterizations performed and an initial analysis of the data.  </p>"},{"location":"Datasets/General_datasets/TCGA/#data-access","title":"Data access","text":"<p>You can find the data from TCGA in the folder: <pre><code>/workspace/datasets/intogen_datasets/genomes/tcga_20171006/filtered\n</code></pre></p> <p>You can find clinical data from samples from TCGA in the folder: <pre><code>/workspace/datasets/intogen_datasets/genomes/tcga_20171006/metadata\n</code></pre></p>  <p>Website</p> <p>https://www.cancer.gov/about-nci/organization/ccg/research/structural-genomics/tcga</p>"},{"location":"Datasets/General_datasets/TCGA/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>Click here to learn how to cite TCGA.</p>"},{"location":"Datasets/General_datasets/TCGA/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> </ul>"},{"location":"Datasets/General_datasets/UK_Biobank/","title":"UK Biobank","text":""},{"location":"Datasets/General_datasets/UK_Biobank/#description","title":"Description","text":"<p>UK Biobank is a large-scale biomedical database and research resource, containing in-depth genetic and health information from half a million UK participants.  It is a very large and detailed prospective study with over 500,000 participants aged 40\u201369 years when recruited in 2006\u20132010.</p> <p>The study has collected and continues to collect extensive phenotypic and genotypic detail about its participants, including data from questionnaires, physical measures, sample assays, accelerometry, multimodal imaging, genome-wide genotyping and longitudinal follow-up for a wide range of health-related outcomes. It is accessible to approved researchers undertaking vital research into the most common and life-threatening diseases. </p>"},{"location":"Datasets/General_datasets/UK_Biobank/#data-access","title":"Data access","text":"<p>Website</p> <p>https://www.ukbiobank.ac.uk/</p>"},{"location":"Datasets/General_datasets/UK_Biobank/#reference","title":"Reference","text":"<ul> <li>Paula Gomis </li> <li>Santi Demajo</li> </ul>"},{"location":"Datasets/General_datasets/cBioPortal/","title":"cBioPortal","text":""},{"location":"Datasets/General_datasets/cBioPortal/#description","title":"Description","text":"<p>The cBioPortal for Cancer Genomics is an open-access, open-source resource for interactive exploration of multidimensional cancer genomics data sets including molecular profiles and clinical attributes from large-scale cancer genomics projects.</p> <p>The portal supports and stores non-synonymous mutations, DNA copy-number data (putative, discrete values per gene, e.g. \"deeply deleted\" or \"amplified\", as well as log2 or linear copy number data), mRNA and microRNA expression data, protein-level and phosphoprotein level data (RPPA or mass spectrometry based), DNA methylation data, and de-identified clinical data. However, for many studies only somatic mutation data and limited clinical data are available. For TCGA studies, the other data types are also available. Germline mutations are supported by cBioPortal, but are, with a few exceptions, not available in the public instance.</p>"},{"location":"Datasets/General_datasets/cBioPortal/#data-access","title":"Data access","text":"<p>Click here to visualize the list of all the available datasets in cBioPortal and download the data.</p>  <p>Website</p> <p>https://www.cbioportal.org/</p>"},{"location":"Datasets/General_datasets/cBioPortal/#citing-in-publications-and-presentations","title":"Citing in Publications and Presentations","text":"<p>When using data from cBioPortal, please cite the following portal papers:</p>  <ul> <li>Cerami et al. The cBio Cancer Genomics Portal: An Open Platform for Exploring Multidimensional Cancer Genomics Data. Cancer Discovery. May 2012 2; 401. PubMed.</li> <li>Gao et al. Integrative analysis of complex cancer genomics and clinical profiles using the cBioPortal. Sci. Signal. 6, pl1 (2013). PubMed.</li> </ul>  <p>Remember to also cite the source of the data if you are using a publicly available dataset.</p> <p>Click here to learn more about how to cite cBioPortal.</p>"},{"location":"Datasets/General_datasets/cBioPortal/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Monica Sanchez</li> </ul>"},{"location":"Datasets/Inhouse_datasets/ALL_cohort/","title":"ALL cohort","text":""},{"location":"Datasets/Inhouse_datasets/ALL_cohort/#description","title":"Description","text":""},{"location":"Datasets/Inhouse_datasets/ALL_cohort/#reference","title":"Reference","text":""},{"location":"Datasets/Inhouse_datasets/Damage_maps/","title":"Damage maps","text":""},{"location":"Datasets/Inhouse_datasets/Damage_maps/#description","title":"Description","text":""},{"location":"Datasets/Inhouse_datasets/Damage_maps/#reference","title":"Reference","text":""},{"location":"Datasets/Inhouse_datasets/Nanopore_data/","title":"Nanopore data","text":""},{"location":"Datasets/Inhouse_datasets/Nanopore_data/#description","title":"Description","text":""},{"location":"Datasets/Inhouse_datasets/Nanopore_data/#reference","title":"Reference","text":""},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/","title":"Pediatric Secondary neoplasms","text":""},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/#description","title":"Description","text":""},{"location":"Datasets/Inhouse_datasets/Pediatric%20Secondary%20neoplasms/#reference","title":"Reference","text":""},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/","title":"Pediatric Rhabdoid cohort","text":""},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/#description","title":"Description","text":""},{"location":"Datasets/Inhouse_datasets/Pediatric_Rhabdoid_cohort/#reference","title":"Reference","text":""},{"location":"Datasets/Other_data/Canonical_transcripts/","title":"Canonical transcripts","text":""},{"location":"Datasets/Other_data/Canonical_transcripts/#description","title":"Description","text":""},{"location":"Datasets/Other_data/Canonical_transcripts/#reference","title":"Reference","text":""},{"location":"Datasets/Other_data/Genomic_regions/","title":"Genomic regions","text":"<p>Genomic regions annotations generated by BBGLab Data includes:</p> <ul> <li><code>3utr</code></li> <li><code>introns</code></li> <li><code>mirna_mat</code></li> <li><code>tfbs</code></li> <li><code>5utr</code></li> <li><code>lncrna_distal_promoters</code></li> <li><code>mirna_pre</code></li> <li><code>utr</code></li> <li><code>cds</code></li> <li><code>lncrna_exons</code></li> <li><code>other_ncrnas</code></li> <li><code>distal_promoters</code></li> <li><code>lncrna_proximal_promoters</code></li> <li><code>proximal_promoters</code></li> <li><code>enhancer</code></li> <li><code>lncrna_splice_sites</code></li> <li><code>splice_sites</code></li> </ul>"},{"location":"Datasets/Other_data/Genomic_regions/#releases","title":"Releases","text":"<ul> <li> <p>Release 2 (30-09-2020): The coordinates are extracted from the <code>gtf3</code> annotation file.</p> <ul> <li>CDS coordinates are generated in two flavours: with and without (default) STOP codon.</li> <li>Gencode v35</li> <li>Ensembl canonical transcripts v101</li> </ul> </li> <li> <p>Release 1 (2019): The coordinates are extracted from the <code>gtf</code> annotation file.</p> <ul> <li>CDS coordinates are generated without STOP codon.</li> <li>Gencode v31</li> <li>Ensembl canonical transcripts v97</li> </ul> </li> </ul>"},{"location":"Datasets/Other_data/Genomic_regions/#description","title":"Description","text":"<p>You can find the data in the folder: <code>/workspace/projects/genomic_regions/</code></p> <ul> <li><code>./raw_data</code>: contains databases from which raw data has been downloaded</li> <li><code>./scripts</code>: contains code to parse raw data</li> <li><code>./hg19</code>: contains genomic annotations in hg19 reference genome</li> <li><code>./hg38</code>: contains genomic annotations in hg38 reference genome</li> </ul>"},{"location":"Datasets/Other_data/Genomic_regions/#reference","title":"Reference","text":"<ul> <li>Joan Enric</li> </ul> <p>Created on 2019-07-08 by claudia.arnedo@irbbarcelona.org</p>"},{"location":"Datasets/Other_data/Nmdetective/","title":"Nmdetective","text":""},{"location":"Datasets/Other_data/Nmdetective/#description","title":"Description","text":""},{"location":"Datasets/Other_data/Nmdetective/#reference","title":"Reference","text":""},{"location":"Datasets/Other_data/Reference_genomes/","title":"Reference genomes","text":""},{"location":"Datasets/Other_data/Reference_genomes/#description","title":"Description","text":""},{"location":"Datasets/Other_data/Reference_genomes/#reference","title":"Reference","text":""},{"location":"IRB/VPN/","title":"VPN","text":"<p>When working from home or outside the PCB, connecting to the VPN is neeeded in order to have access to resources such as the cluster.</p>"},{"location":"IRB/VPN/#linux-ubuntu-2004","title":"Linux (Ubuntu 20.04)","text":"<p>1 - Install \"Openconnect\"</p> <pre><code>sudo apt update\nsudo apt install openconnect\n</code></pre> <p>2 - Connect to the VPN</p> <pre><code>sudo openconnect --protocol=gp vpnirb.pcb.ub.es\n# You can use the parameter --user to automatically enter the username.\n</code></pre> <p>You can disconnect by just pressing <code>Ctrl+C</code></p>"},{"location":"IRB/VPN/#full-instructions","title":"Full instructions","text":"<p>VPN tutorial - pdf</p>"},{"location":"IRB/VPN/#references","title":"References","text":"<ul> <li>Miguel Grau</li> <li>Carlos L\u00f3pez Elorduy</li> </ul>"},{"location":"IRB/eduroam/","title":"Eduroam","text":""},{"location":"IRB/eduroam/#configuration","title":"Configuration","text":"<ul> <li>Security: WPA &amp; WPA2 Enterprise</li> <li>Authentication: Protected EAP (PEAP)</li> <li>Anonymous identity: Empty</li> <li>Check the checkbox \"No CA certificate is required\"</li> <li>PEAP version: Automatic</li> <li>Inner authentication: MSCHAPv2</li> <li>Username: clusteruser@irbbarcelona.org</li> <li>Password: IRB password</li> </ul>"},{"location":"IRB/eduroam/#example","title":"Example","text":""},{"location":"IRB/eduroam/#reference","title":"Reference","text":"<ul> <li>Martina Gasull</li> <li>Carlos L\u00f3pez Elorduy</li> <li>Miguel Grau</li> </ul>"},{"location":"Plots_and_scripts/HierarchicalClustering/","title":"Hierarchical Clustering","text":""},{"location":"Plots_and_scripts/HierarchicalClustering/#python","title":"Python","text":"<pre><code>import numpy as np\nfrom scipy.cluster import hierarchy\nimport matplotlib.pyplot as plt\n\n# condensed distance array\nydist = np.array([662., 877., 255., 412., 996., 295., 468., 268., 400., 754., 564., 138., 219., 869., 669.])\n\n# linkage object\nZ = hierarchy.linkage(ydist, 'single')\n\n# compute and plot dendrogram\ndn = hierarchy.dendrogram(Z)\n</code></pre>"},{"location":"Plots_and_scripts/HierarchicalClustering/#reference","title":"Reference","text":"<ul> <li>Ferran Mui\u00f1os</li> </ul>"},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/","title":"Intogen-BoostDM plots","text":""},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/#description","title":"Description","text":""},{"location":"Plots_and_scripts/Intogen-BoostDM%20plots/#reference","title":"Reference","text":""},{"location":"Plots_and_scripts/Mutational_profile/","title":"Mutational profile","text":"<p>The function <code>plot_signature</code>  will allow you to plot the mutational profile of a sample given the vector of 96 channels (see y axis in the example figure) with the frequencies of each nucleotide change. It takes as input the the vector with the mutations frequency  (<code>profile</code>) and the title of the plot (<code>title</code>).</p> <p>The function <code>minor_tick_labels</code>  is needed to generate the labels of the plot.</p>"},{"location":"Plots_and_scripts/Mutational_profile/#example","title":"Example","text":""},{"location":"Plots_and_scripts/Mutational_profile/#function","title":"Function","text":"<pre><code>import seaborn as sns\nimport numpy as np\n\ndef minor_tick_labels():\n    major_labels = ['C&gt;A', 'C&gt;G', 'C&gt;T', 'T&gt;A', 'T&gt;C', 'T&gt;G']\n    flanks = ['AA', 'AC', 'AG', 'AT', 'CA', 'CC', 'CG', 'CT',\n              'GA', 'GC', 'GG', 'GT', 'TA', 'TC', 'TG', 'TT']\n    minor_labels = []\n    for subs in major_labels:\n        for flank in flanks:\n            minor_labels.append(flank[0] + subs[0] + flank[1])\n    return minor_labels\n\ndef plot_signature(profile, title=None):\n    \"\"\"\n    Args:\n        profile: 96-array in lexicographic order\n        title: string\n\n    Returns:\n        produces the signature bar plot\n    \"\"\"\n\n    fig, ax = plt.subplots(figsize=(15, 2))\n    total = np.sum(profile)\n    if abs(total - 1) &gt; 0.01:\n        profile = profile / total\n    sns.set(font_scale=1.5)\n    sns.set_style('white')\n\n    # bar plot\n    barlist = ax.bar(range(96), profile)\n    color_list = ['#72bcd4', 'k', 'r', '#7e7e7e', 'g', '#e6add8']\n    for category in range(6):\n        for i in range(16):\n            barlist[category * 16 + i].set_color(color_list[category])\n    ax.set_xlim([-0.5, 96])\n    ymax = np.max(profile) * 1.2\n    ax.set_ylim(0, ymax)\n\n    # ax.set_ylabel('subs rel freq')\n    labels = ['C&gt;A', 'C&gt;G', 'C&gt;T', 'T&gt;A', 'T&gt;C', 'T&gt;G']\n    major_ticks = np.arange(8, 8 + 16 * 5 + 1, 16)\n    minor_ticks = np.arange(0.2, 96.2, 1)\n    ax.tick_params(length=0, which='major', pad=30, labelsize=12)\n    ax.tick_params(length=0, which='minor', pad=5, labelsize=10)\n    ax.set_xticks(major_ticks, minor=False)\n    ax.set_xticklabels(labels, minor=False)\n    ax.set_xticks(minor_ticks, minor=True)\n    ax.set_xticklabels(minor_tick_labels(), minor=True, rotation=90)\n\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n    ax.set_title(title, fontsize=24)\n    plt.show()\n</code></pre>  <p>Note</p> <ul> <li>The function normalizes the vector so that the sum of all the frequencies is equal to 1.</li> <li>If you want to normalize the frequencies so that the trinucleotide composition of the genomic regions from which the mutations have been obtained, you need to normalize the vector taking into account the trinucleotide composition before using the function plot_signature.</li> </ul>"},{"location":"Plots_and_scripts/Mutational_profile/#normalization-of-the-vector","title":"Normalization of the vector","text":"<p>In order to normalize the vector you will need to import from bgreference the reference genome in which the data has been sequenced.</p> <p>You will also need the vector with the mutations frequency (<code>profile</code>) and the directory of a file with the genomic regions from which the mutations have been obtained (<code>regions_file_dir</code>), with at least the columns: <code>CHROMOSOME</code>, <code>START</code>, <code>END</code>.</p>"},{"location":"Plots_and_scripts/Mutational_profile/#needed-functions","title":"Needed functions","text":"<pre><code>from itertools import product\nimport pandas as pd\nimport numpy as np\n\ncb = dict(zip('ACGT','TGCA'))\n\ndef triplet_index(triplet):\n\n    a, ref, b = tuple(list(triplet))\n    s = 16 * (ref == 'T')\n    t = 4 * ((a == 'C') + 2 * (a == 'G') + 3 * (a == 'T'))\n    u = (b == 'C') + 2 * (b == 'G') + 3 * (b == 'T')\n    return s + t + u\n\n\ndef sbs_format(triplet_count):\n    \"\"\"Maps ref triplets to 96 SBS channel\"\"\"\n\n    vector = []\n    for ref in 'CT':\n        for alt in 'ACGT':\n            if alt != ref:\n                for a, b in product(cb, repeat=2):\n                    vector.append(triplet_count[triplet_index(a + ref + b)])\n    return vector\n\n\ndef triplets():\n\n    for ref in 'CT':\n        for a, b in product(cb, repeat=2):\n            yield a + ref + b\n\n\ndef count_triplets(seq):\n\n    return [seq.count(t) + seq.count(rev(t)) for t in triplets()]\n\ndef rev(seq):\n    \"\"\"reverse complement of seq\"\"\"\n\n    return ''.join(list(map(lambda s: cb[s], seq[::-1]))) \n\ndef get_triplet_counts_region(regions_file_dir,reference_genome=hg38):\n    \"\"\"\n    Function to obtain the vector with 96 triplet counts given the regions file.\n    \"\"\"\n    regions=pd.read_csv(regions_file_dir,sep='\\t',dtype={'CHROMOSOME':'string'})\n    assert(np.all(regions.apply(lambda r: r['END'] - r['START'] + 1 &gt; 0, axis=1)))\n    regions['interval'] = regions.apply(lambda r: (r['CHROMOSOME'], r['START'], r['END']), axis=1)\n\n    counts = np.zeros(32)\n    for chrom, start, end in list(regions['interval']):\n        try:\n            seq = reference_genome(chrom, start-1, size=end-start+3)  # sequence +1 nt 5' and 3' flanking nucleotides\n            c = np.array(count_triplets(seq))\n            counts += c\n        except Exception as e:\n            print(e)\n    return sbs_format(list(map(int, counts)))\n</code></pre>"},{"location":"Plots_and_scripts/Mutational_profile/#normalization","title":"Normalization","text":"<pre><code>region_triplet_abundance=get_triplet_counts_region(regions_file_dir)\nnormalized_profile = np.array(profile)/np.array(region_triplet_abundance)\n</code></pre>"},{"location":"Plots_and_scripts/Mutational_profile/#reference","title":"Reference","text":"<ul> <li>Paula Gomis</li> <li>Ferran Mui\u00f1os</li> </ul>"},{"location":"Plots_and_scripts/Needle_plot/","title":"Needle plot","text":""},{"location":"Plots_and_scripts/Needle_plot/#description","title":"Description","text":""},{"location":"Plots_and_scripts/Needle_plot/#reference","title":"Reference","text":""},{"location":"Tools/Conda/","title":"Conda","text":""},{"location":"Tools/Conda/#description","title":"Description","text":"<p>Conda is an open source package management system and environment management system that runs on Windows, macOS, Linux and z/OS. Conda quickly installs, runs and updates packages and their dependencies.</p>"},{"location":"Tools/Conda/#get-started","title":"Get started","text":"<pre><code>conda create -n &lt;env name&gt; &lt;package[=&lt;version&gt;]&gt;\nconda activate &lt;env name&gt;\nconda install &lt;package[=version]&gt;\n</code></pre>"},{"location":"Tools/Conda/#cheatsheet","title":"Cheatsheet","text":""},{"location":"Tools/Conda/#environments","title":"Environments","text":"<p>Activate an environment:</p> <pre><code>conda activate &lt;environment name&gt;\n</code></pre> <p>Deactivates an environment. If in <code>base</code>, closes conda.</p> <pre><code>conda deactivate\n</code></pre> <p>List all environments:</p> <pre><code>conda env list\n</code></pre> <pre><code>conda info --envs\n</code></pre> <p>Create a new virtual environment with  <pre><code>conda create --name &lt;environment name&gt; [&lt;packages[=&lt;version&gt;]&gt;]\n</code></pre> <p>Export active environment to a file</p> <pre><code>conda env export &gt; environment.yml\n</code></pre> <p>Export all environments to its own file:</p> <pre><code>for env in $(conda env list | cut -d\" \" -f1); do \n   if [[ ${env:0:1} == \"#\" ]] ; then continue; fi;\n   conda env export -n $env &gt; ${env}.yml\ndone\n</code></pre> <p>Create environment from file</p> <pre><code>conda env create -f environment.yml\n</code></pre> <p>Clone an environment</p> <pre><code>conda create --name &lt;environment name&gt; --clone &lt;original environment&gt;\n</code></pre> <p>Remove an environment</p> <pre><code>conda env remove --name &lt;environment name&gt;\n</code></pre> <pre><code>conda remove --name &lt;environment name&gt; --all\n</code></pre> <p>List all packages installed (in current environment)</p> <pre><code>conda list\n</code></pre> <p>List all packages installed with path</p> <pre><code>conda list --explicit\n</code></pre> <p>Show history of changes in packages</p> <pre><code>conda list --revisions\n</code></pre>"},{"location":"Tools/Conda/#packages","title":"Packages","text":"<p>Install a package (use <code>-f</code> to force the installation)</p> <pre><code>conda install &lt;package&gt;\n</code></pre> <p>Install package(s) specified in a file (like a Python requirements file)</p> <pre><code>conda install --file &lt;file&gt;\n</code></pre> <p>Uninstall a package</p> <pre><code>conda remove &lt;package&gt;\n</code></pre> <p>Search for a package</p> <pre><code>conda search &lt;package&gt;\n</code></pre>"},{"location":"Tools/Conda/#configuration","title":"Configuration","text":"<p>Show configuration</p> <pre><code>conda config --show\n</code></pre> <p>Add channels (use <code>add</code> instead of <code>append</code> to put the channel on the top of the list)</p> <pre><code>conda config --append channels &lt;channel name&gt;\n</code></pre>"},{"location":"Tools/Conda/#building-packages","title":"Building Packages","text":"<p>Install conda build</p> <pre><code>conda install conda-build\n</code></pre> <p>Build package</p> <pre><code>conda build &lt;directory with the files&gt;\n</code></pre> <p>Build for other platforms</p> <pre><code>conda convert --platform all &lt;path to package&gt;\n</code></pre> <p>Install built package</p> <pre><code>conda install --use-local &lt;package&gt;\n</code></pre>"},{"location":"Tools/Conda/#from-pypi","title":"From Pypi","text":"<p>Create files</p> <pre><code>conda skeleton pypi &lt;package&gt;\n</code></pre> <p>Build for different Python version</p> <pre><code>conda build --python &lt;version&gt; &lt;directory with the files&gt;\n</code></pre>"},{"location":"Tools/Conda/#custom-channel","title":"Custom Channel","text":"<p>Add channel</p> <pre><code>conda config --append channels file://&lt;path to folder&gt;\n</code></pre> <p>(re)build the index</p> <pre><code>conda index &lt;channel folder&gt;/&lt;platform&gt;\n</code></pre>"},{"location":"Tools/Conda/#reference","title":"Reference","text":"<ul> <li>Jordi Deu Pons</li> <li>Miguel Grau</li> <li>Federica Brando</li> <li>Carlos L\u00f3pez</li> </ul>"},{"location":"Tools/Docker/","title":"Docker","text":""},{"location":"Tools/Docker/#description","title":"Description","text":""},{"location":"Tools/Docker/#reference","title":"Reference","text":""},{"location":"Tools/Nextflow/","title":"Nextflow","text":"<p>Nextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of data-driven, computational pipelines written in the most common scripting languages.</p>"},{"location":"Tools/Nextflow/#usage","title":"Usage","text":"<p>To run the default installed version of Nextflow, simply load the <code>nextflow</code> module:</p> <pre><code>$ module load nextflow\n$ nextflow help\n\nUsage: nextflow [options] COMMAND [arg...]\n</code></pre> <p>For usage documentation, run <code>nextflow help</code>.</p>"},{"location":"Tools/Nextflow/#submitting-processes-as-serial-jobs","title":"Submitting processes as serial jobs","text":"<p>Recommended for serial jobs only</p> <p>This section is recommended for serial jobs only. For parallel jobs, please see the Parallel jobs section below.</p>  <p>Nextflow supports the ability to submit pipeline scripts as separate cluster jobs using the SGE executor.</p> <p>To enable the SGE executor, simply set to <code>process.executor</code> property to sge in a configuration file named <code>nextflow.config</code> in the job working directory. The amount of resources requested by each job submission is defined in the cluster options section, where all Univa scheduler resources are supported.</p> <p>For example, to run all pipeline jobs with 2 serial cores and 2GB of memory for 1 hour, create the following configuration file:</p> <pre><code>process.executor='sge'\nprocess.clusterOptions='-pe smp 2 -l h_vmem=1G,h_rt=1:0:0'\n</code></pre>  <p>Setting the memory limit for serial jobs</p> <p>Add the <code>-DXmx</code> option to limit the amount of memory Nextflow can use in serial jobs. For more information regarding the Java VM memory allocation, see here.</p>"},{"location":"Tools/Nextflow/#parallel-jobs","title":"Parallel jobs","text":"<p>Parallel jobs will use the in-built Apache Ignite clustering platform; Execution will be performed on the nodes requested in the submit request over MPI rather than submitting new jobs for each pipeline.</p>  <p>Do not use the SGE executor in parallel jobs</p> <p>Using the SGE executor for parallel jobs causes the master job to hang until it is killed by the scheduler for exceeding walltime. This is due to Apache Ignite not being able to communicate to other pipeline scripts submitted as separate jobs.</p>  <p>To ensure parallel jobs use Apache Ignite, add the following to the configuration file (or omit the process.executor setting):</p> <pre><code>process.executor='ignite'\n</code></pre>"},{"location":"Tools/Nextflow/#example-jobs","title":"Example jobs","text":""},{"location":"Tools/Nextflow/#serial-job","title":"Serial job","text":"<p>Here is an example job taken from the Nextflow website to submit each process in the <code>input.nf</code> file as a new cluster job with 1 core and 1GB of memory. Ensure the cumulative runtime across all processes does not exceed the runtime requested in the master job:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\nmodule load nextflow\n\nnextflow -DXmx=1G \\\n         -C nextflow.config \\\n         run input.nf\n</code></pre>"},{"location":"Tools/Nextflow/#parallel-job","title":"Parallel job","text":"<p>Here is an example job taken from the Nextflow website to run each process in the <code>input.nf</code> file using 48 cores across 2 sdv nodes with Apache Ignite:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe parallel 48\n#$ -l infiniband=sdv-i\n#$ -l h_rt=240:0:0\n\nmodule load nextflow openmpi\n\nmpirun --pernode \\\n       nextflow run input.nf \\\n       -with-mpi\n</code></pre>"},{"location":"Tools/Nextflow/#links","title":"Links","text":"<ul> <li>Nextflow documentation</li> <li>Nextflow basic pipeline example</li> <li>Nextflow presentation videos</li> <li>Nextflow community support</li> <li>Nextflow MPI</li> <li>Apache Ignite</li> </ul>"},{"location":"Tools/Nextflow/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Carlos L\u00f3pez Elorduy</li> <li>Miguel Grau</li> </ul>"},{"location":"Tools/BBG-tools/BGconfig/","title":"BGconfig","text":""},{"location":"Tools/BBG-tools/BGconfig/#description","title":"Description","text":""},{"location":"Tools/BBG-tools/BGconfig/#reference","title":"Reference","text":""},{"location":"Tools/BBG-tools/BGdata/","title":"BGdata","text":""},{"location":"Tools/BBG-tools/BGdata/#description","title":"Description","text":""},{"location":"Tools/BBG-tools/BGdata/#reference","title":"Reference","text":""},{"location":"Tools/BBG-tools/BGlogs/","title":"BGlogs","text":""},{"location":"Tools/BBG-tools/BGlogs/#description","title":"Description","text":""},{"location":"Tools/BBG-tools/BGlogs/#reference","title":"Reference","text":""},{"location":"Tools/BBG-tools/BGpack/","title":"BGpack","text":""},{"location":"Tools/BBG-tools/BGpack/#description","title":"Description","text":""},{"location":"Tools/BBG-tools/BGpack/#reference","title":"Reference","text":""},{"location":"Tools/BBG-tools/BGreference/","title":"BgReference","text":""},{"location":"Tools/BBG-tools/BGreference/#description","title":"Description","text":"<p>BgReference is a library to fast retrive Genome Reference partial sequences.</p>"},{"location":"Tools/BBG-tools/BGreference/#instalation","title":"Instalation","text":"<p><pre><code>conda install -c conda-forge -c bbglab bgreference\n</code></pre> or <pre><code>pip install bgreference\n</code></pre></p>"},{"location":"Tools/BBG-tools/BGreference/#examples","title":"Examples","text":"<pre><code>from bgreference import hg19, hg38\n# Get 10 bases from chromosome one build hg19\nhg19('1', 12345, size=10)\n\n# Get the sequence of the whole chromosome\nhg19('1',(1), size=None)\n\n# You can use synonymous sequence names\nhg19(2, 23456)\nhg19('2', 23456)\nhg19('chr2', 23456)\n\nhg19('MT', 234, size=3)\nhg19('chrM', 234, size=3)\nhg19('chrMT', 234, size=3)\n</code></pre>"},{"location":"Tools/BBG-tools/BGreference/#repository","title":"Repository","text":"<p>Click here to see the repository of BgReference.</p>"},{"location":"Tools/BBG-tools/BGreference/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> <li>Paula Gomis </li> </ul>"},{"location":"Tools/BBG-tools/BGsignature/","title":"BGsignature","text":""},{"location":"Tools/BBG-tools/BGsignature/#description","title":"Description","text":""},{"location":"Tools/BBG-tools/BGsignature/#reference","title":"Reference","text":""},{"location":"Tools/BBG-tools/BGvep/","title":"BGvep","text":""},{"location":"Tools/BBG-tools/BGvep/#description","title":"Description","text":""},{"location":"Tools/BBG-tools/BGvep/#reference","title":"Reference","text":""},{"location":"Tools/BBG-tools/OpenVariant/","title":"OpenVariant","text":""},{"location":"Tools/BBG-tools/OpenVariant/#description","title":"Description","text":"<p>OpenVariant is a comprehensive Python package that provides different functionalities to read, parse and operate different multiple input file formats (e. g. <code>tsv</code>, <code>csv</code>, <code>vcf</code>, <code>maf</code>, <code>bed</code>), being able to build an unified output with  a proper annotation file structure.</p>"},{"location":"Tools/BBG-tools/OpenVariant/#usage","title":"Usage","text":"<p>Click here to see the installation guide and the complete documentation of OpenVariant.</p> <p>When working with OpenVariant, we need to distinguish 3 different types of files: <code>input files</code> and <code>annotation file</code>, which are provided by the user and <code>output file</code>, which will returned from the function.</p> <ul> <li><code>Input files</code> will be the group of files in different formats (e.g. tsv, csv, vcf, maf, bed) that we want to parse. </li> <li><code>Annotation file</code> is a YAML file which describes how the <code>input files</code> are processed and how the <code>output file</code> will look like.</li> <li><code>Output files</code> are generated by OpenVariant and they are the result of the process.</li> </ul>"},{"location":"Tools/BBG-tools/OpenVariant/#functions","title":"Functions","text":"<p>OpenVariant has several functions to perform different tasks: </p> <ul> <li><code>find_files</code>: Find files with a given pattern name in a given folder.</li> <li><code>Variant</code>: Parse an input file through the annotation file. It will generate an object which you can apply different functionalities</li> <li><code>cat</code>: It will show on the stdout (standard out) the whole parsed output. </li> <li><code>group_by</code>: It will generate an iterator that will contain three variables: <code>group_key</code> (the value of each group), <code>group_result</code> (a list of all rows that pertain to each group) and <code>command</code> (if it uses the <code>script</code> parameter or not). It will group the parsed result for each different value of the specified <code>key_by</code>.</li> <li><code>count</code>: It returns the number of rows that matches a specific conditions.</li> </ul> <p>Click here to see several examples of each of the functions from OpenVariant.</p>"},{"location":"Tools/BBG-tools/OpenVariant/#parameters","title":"Parameters","text":"<p>The different options and parameters of these functions are specified in the <code>annotation file</code>, which has several required and optional parameters.   Click here to learn about the parameters in the <code>annotation file</code> and a to see a template of the <code>annotation file</code>.</p>"},{"location":"Tools/BBG-tools/OpenVariant/#reference","title":"Reference","text":"<ul> <li>David Mart\u00ednez</li> <li>Paula Gomis</li> </ul>"},{"location":"Tools/Sequencing_tools/Bedtools/","title":"Bedtools","text":"<p>The Bedtools suite is a collection of tools for a wide-range of genomics analysis tasks.</p>"},{"location":"Tools/Sequencing_tools/Bedtools/#installation","title":"Installation","text":"<p>You can check the installation guide here.</p>"},{"location":"Tools/Sequencing_tools/Bedtools/#usage","title":"Usage","text":"<p>To run the default installed version of Bedtools, simply load the bedtools module:</p> <pre><code>$ bedtools -h\n\nUsage:   bedtools &lt;subcommand&gt; [options]\nFor full usage documentation, run bedtools -h.\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bedtools/#example-job","title":"Example job","text":""},{"location":"Tools/Sequencing_tools/Bedtools/#serial-job","title":"Serial job","text":"<p>Here is an example job running on 1 core and 1GB of memory:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\n# Report the base-pair overlap between the features in two BED files.\nbedtools intersect -a reads.bed -b genes.bed\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bedtools/#links","title":"Links","text":"<ul> <li>Bedtools GitHub</li> <li>Bedtools documentation</li> </ul>"},{"location":"Tools/Sequencing_tools/Bedtools/#reference","title":"Reference","text":"<ul> <li>Hania Kranas</li> </ul>"},{"location":"Tools/Sequencing_tools/Bowtie2/","title":"Bowtie2","text":"<p>Bowtie2 is an ultra fast and memory-efficient tool for aligning sequencing reads to long reference sequences.</p>"},{"location":"Tools/Sequencing_tools/Bowtie2/#installation","title":"Installation","text":"<p>You can check the installation documentation here.</p>"},{"location":"Tools/Sequencing_tools/Bowtie2/#conda","title":"Conda","text":"<pre><code>conda install -c bioconda bowtie2\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bowtie2/#package-manager","title":"Package manager","text":"<pre><code>sudo apt update\nsudo apt install bowtie2\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bowtie2/#manually-on-ubuntulinux","title":"Manually on Ubuntu/Linux","text":"<p>Create and go to install directory</p> <pre><code>cd $HOME/tools/bowtie2/\n</code></pre> <p>Download Ubuntu/Linux version</p> <pre><code>wget https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.4.2/bowtie2-2.4.2-sra-linux-x86_64.zip/download\n</code></pre> <p>Decompress</p> <pre><code>unzip download\n</code></pre> <p>Add location to system PATH</p> <pre><code>export PATH=$HOME/tools/bowtie2/bowtie2-2.4.2-sra-linux-x86_64:$PATH\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bowtie2/#check-installation","title":"Check installation","text":"<pre><code>bowtie2 --help\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bowtie2/#usage","title":"Usage","text":"<pre><code>$ bowtie2 -h\n\nUsage:   bowtie2 [options]* -x &lt;bt2-idx&gt; {-1 &lt;m1&gt; -2 &lt;m2&gt; | -U &lt;r&gt; |\n         --interleaved &lt;i&gt;} -S [&lt;sam&gt;]\n</code></pre> <p>For full usage documentation, run <code>bowtie2 -h</code>.</p>"},{"location":"Tools/Sequencing_tools/Bowtie2/#example-job","title":"Example job","text":""},{"location":"Tools/Sequencing_tools/Bowtie2/#serial-job","title":"Serial job","text":"<p>Here is an example job running on 1 core and 1GB of memory:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\n# Prepare example genomes in &lt;inputDir&gt;\n# Output is stored in &lt;outputDir&gt;\nbowtie2-build &lt;inputDir&gt; &lt;outputDir&gt;\nbowtie2-inspect &lt;outputDir&gt;\n</code></pre>"},{"location":"Tools/Sequencing_tools/Bowtie2/#links","title":"Links","text":"<ul> <li>Bowtie2 GitHub</li> <li>Bowtie2 example</li> </ul>"},{"location":"Tools/Sequencing_tools/Bowtie2/#reference","title":"Reference","text":"<ul> <li>Hania Kranas</li> </ul>"},{"location":"Tools/Sequencing_tools/Cutadapt/","title":"Cutadapt","text":""},{"location":"Tools/Sequencing_tools/Cutadapt/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/Cutadapt/#reference","title":"Reference","text":""},{"location":"Tools/Sequencing_tools/Fastqc/","title":"Fastqc","text":"<p>FastQC aims to provide a simple way to do some quality control checks on raw sequence data coming from high throughput sequencing pipelines.</p>"},{"location":"Tools/Sequencing_tools/Fastqc/#installation","title":"Installation","text":""},{"location":"Tools/Sequencing_tools/Fastqc/#apt-get","title":"apt-get","text":"<pre><code>sudo apt-get update\nsudo apt-get install fastqc\n</code></pre>"},{"location":"Tools/Sequencing_tools/Fastqc/#apt","title":"apt","text":"<pre><code>sudo apt update\nsudo apt install fastqc\n</code></pre>"},{"location":"Tools/Sequencing_tools/Fastqc/#usage","title":"Usage","text":"<pre><code>$ fastqc --help\n            FastQC - A high throughput sequence QC analysis tool\n\nSYNOPSIS\n\n        fastqc seqfile1 seqfile2 .. seqfileN\n\n    fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam]\n           [-c contaminant file] seqfile1 .. seqfileN\n</code></pre>"},{"location":"Tools/Sequencing_tools/Fastqc/#example-job","title":"Example job","text":""},{"location":"Tools/Sequencing_tools/Fastqc/#serial-job","title":"Serial job","text":"<p>Here is an example job running on 1 core and 1GB of memory:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\nfastqc raw_data.fastq.gz raw_data2.fastq.gz\n</code></pre>  <p>Viewing the Fastqc results</p> <p>To view the Fastqc results, you may open the fastqc_report.html file in a web browser or the summary.txt file (located in the zipped output archive) on the command line. For assistance copying files to your local machine, please see the Moving Data page.</p>"},{"location":"Tools/Sequencing_tools/Fastqc/#links","title":"Links","text":"<ul> <li>FastQC website</li> <li>FastQC manual</li> <li>FastQC video tutorial</li> </ul>"},{"location":"Tools/Sequencing_tools/Fastqc/#reference","title":"Reference","text":"<ul> <li>Hania Kranas</li> </ul>"},{"location":"Tools/Sequencing_tools/Samtools/","title":"SAMtools","text":"<p>SAMtools implements various utilities for post-processing alignments in the SAM format, such as indexing, variant caller and alignment viewer, and thus provides universal tools for processing read alignments.</p>"},{"location":"Tools/Sequencing_tools/Samtools/#installation","title":"Installation","text":""},{"location":"Tools/Sequencing_tools/Samtools/#conda","title":"Conda","text":"<pre><code>conda install -c bioconda samtools\n</code></pre>"},{"location":"Tools/Sequencing_tools/Samtools/#manual","title":"Manual","text":"<p>For the manual installation, you can find the instructions here.</p>"},{"location":"Tools/Sequencing_tools/Samtools/#usage","title":"Usage","text":"<pre><code>samtools view -b -S -o genome_reads_aligned.bam genome_reads_aligned.sam\n</code></pre>  <p>Core Usage</p> <p>To ensure that SAMtools uses the correct number of cores, the <code>-@ ${NSLOTS}</code> option should be used on commands that support it.</p>"},{"location":"Tools/Sequencing_tools/Samtools/#example-job","title":"Example job","text":""},{"location":"Tools/Sequencing_tools/Samtools/#serial-job","title":"Serial job","text":"<p>Here is an example job running on 4 cores and 8GB of memory:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 4\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=2G\n\nsamtools view -@ ${NSLOTS} -b -S -o genome_reads_aligned.bam \\\n    genome_reads_aligned.sam\n\nsamtools sort -@ ${NSLOTS} genome_reads_aligned.bam \\\n    &gt; genome_reads_aligned.sorted.bam\n\nsamtools index genome_reads_aligned.sorted.bam\n\nsamtools mpileup -g -f ref_genome_1K.fna genome_reads_aligned.sorted.bam \\\n    &gt; genome_variants.bcf\n</code></pre>"},{"location":"Tools/Sequencing_tools/Samtools/#links","title":"Links","text":"<ul> <li>Samtools GitHub</li> <li>Samtools website</li> <li>Samtools documentation</li> </ul>"},{"location":"Tools/Sequencing_tools/Samtools/#reference","title":"Reference","text":"<ul> <li>Hania Kranas</li> </ul>"},{"location":"Tools/Sequencing_tools/Trimmomatic/","title":"Trimmomatic","text":""},{"location":"Tools/Sequencing_tools/Trimmomatic/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/Trimmomatic/#reference","title":"Reference","text":""},{"location":"Tools/Sequencing_tools/Vep/","title":"Vep","text":""},{"location":"Tools/Sequencing_tools/Vep/#ensembl-vep","title":"Ensembl-VEP","text":"<p>VEP determines the effect of your variants (insertions, deletions and structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions.</p>"},{"location":"Tools/Sequencing_tools/Vep/#usage","title":"Usage","text":"<p>In order to install VEP, you can follow the installation guide.</p> <p>Once it is installed, simply load the <code>ensembl-vep</code> module:</p> <pre><code>$ vep\n\nUsage:\n./vep [--cache|--offline|--database] [arguments]\n\nBasic options\n=============\n\n--help                 Display this message and quit\n\n-i | --input_file      Input file\n-o | --output_file     Output file\n--force_overwrite      Force overwriting of output file\n--species [species]    Species to use [default: \"human\"]\n\n--everything           Shortcut switch to turn on commonly used options. See web\n                       documentation for details [default: off]\n--fork [num_forks]     Use forking to improve script runtime\n</code></pre> <p>For full option documentation see here.</p> <p>Instructions on how to download and use cached files can be found here.</p> <p>To enable offline mode and use of the cache, pass the <code>--offline</code> and <code>--cache</code> flags.</p>"},{"location":"Tools/Sequencing_tools/Vep/#example-job","title":"Example job","text":""},{"location":"Tools/Sequencing_tools/Vep/#serial-job","title":"Serial job","text":"<p>Here is an example job running on 1 core and 1GB of memory:</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\nvep -i homo_sapiens_GRCh38.vcf \\\n    --cache \\\n    --offline \\\n    --output_file results\n</code></pre>"},{"location":"Tools/Sequencing_tools/Vep/#links","title":"Links","text":"<ul> <li>Ensembl-VEP documentation</li> <li>Ensembl-VEP tutorial</li> <li>Ensembl-VEP examples</li> <li>Ensembl-VEP web application</li> </ul>"},{"location":"Tools/Sequencing_tools/Vep/#reference","title":"Reference","text":"<ul> <li>To be added</li> </ul>"},{"location":"Tools/Sequencing_tools/pysam/","title":"pysam","text":""},{"location":"Tools/Sequencing_tools/pysam/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/pysam/#reference","title":"Reference","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/","title":"MosaicForecast","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/MosaicForecast/#reference","title":"Reference","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/","title":"Mutect2","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Mutect2/#reference","title":"Reference","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/","title":"Platinum","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Platinum/#reference","title":"Reference","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/","title":"Sarek","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/#description","title":"Description","text":""},{"location":"Tools/Sequencing_tools/Variant_callers/Sarek/#reference","title":"Reference","text":""},{"location":"Tools/Signature_tools/DeconstructSigs/","title":"DeconstructSigs","text":""},{"location":"Tools/Signature_tools/DeconstructSigs/#description","title":"Description","text":""},{"location":"Tools/Signature_tools/DeconstructSigs/#reference","title":"Reference","text":""},{"location":"Tools/Signature_tools/SigProfiler/","title":"SigProfiler","text":""},{"location":"Tools/Signature_tools/SigProfiler/#description","title":"Description","text":""},{"location":"Tools/Signature_tools/SigProfiler/#reference","title":"Reference","text":""},{"location":"Tools/Signature_tools/SigProfilerJulia/","title":"SigProfilerJulia","text":""},{"location":"Tools/Signature_tools/SigProfilerJulia/#description","title":"Description","text":""},{"location":"Tools/Signature_tools/SigProfilerJulia/#reference","title":"Reference","text":""},{"location":"Tools/Signature_tools/mSigHDP/","title":"mSigHDP","text":""},{"location":"Tools/Signature_tools/mSigHDP/#description","title":"Description","text":""},{"location":"Tools/Signature_tools/mSigHDP/#reference","title":"Reference","text":""},{"location":"Tools/Signature_tools/mSignAct/","title":"mSignAct","text":""},{"location":"Tools/Signature_tools/mSignAct/#description","title":"Description","text":""},{"location":"Tools/Signature_tools/mSignAct/#reference","title":"Reference","text":""},{"location":"Tools/Singularity/Building_containers/","title":"Building containers","text":"<p>Singularity containers are built from a definition file which allows the container to be built identically by anyone possessing the file.</p>  <p>Root privileges required to build a container</p> <p>Note that the process of building a container requires elevated privileges</p>   <p>One primary task per container</p> <p>HPC containers are designed to perform one primary task, and should consist of a main application and its dependencies, in a similar way to how module files are provided. Since containers are lightweight, you can use separate containers instead of general purpose containers containing a collection of applications. This improves supportability, performance and reproducibility.</p>"},{"location":"Tools/Singularity/Building_containers/#building-a-singularity-container-from-scratch","title":"Building a Singularity container from scratch","text":"<p>Building from scratch gives complete control over the contents of the container, including operating system and packages. Certain packages may only be available for a specific version of Linux (i.e. compatibility issues) so being able to build a container from scratch enhances research capability.</p> <p>The following example demonstrates building an Ubuntu 20 (focal) container using definition file <code>ubuntu20_helloworld.def</code> that installs the <code>python3</code> package via the Ubuntu package manager:</p> <pre><code>BootStrap: debootstrap\nOSVersion: focal\nMirrorURL: http://us.archive.ubuntu.com/ubuntu/\n\n%post\n  apt-get install --yes python3\n\n%runscript\n  python3 \"${@}\"\n</code></pre> <p>The build process is unattended, and will not succeed if any operations require interactive input. Be sure to use <code>-y</code> or <code>--yes</code> options when installing packages.</p> <p>Create the image (this step requires root privileges):</p> <pre><code>sudo singularity build ubuntu20_helloworld.simg ubuntu20_helloworld.def\n</code></pre> <p>This will result in a usable image in the current working directory. Be aware that if you want a very specific version of package from a repository, that package may not be available in future, so where possible, try to future-proof your containers.</p>"},{"location":"Tools/Singularity/Building_containers/#building-containers-for-other-linux-distributions","title":"Building containers for other Linux distributions","text":"<p>You may build Ubuntu images using CentOS and vice versa. However to bootstrap, you will need extra packages on the host OS to build the container. CentOS hosts require the <code>debootstrap</code> package to create Ubuntu containers, and Ubuntu hosts require the <code>yum</code> package to build CentOS containers. Alternatively you may create containers from an existing Singularity or Docker image, as explained in the following section. Since this method builds upon pre-built images, the <code>debootstrap</code> or <code>yum</code> packages are not required.</p>  <p>Using LTS for Ubuntu definitions</p> <p>When building an Ubuntu container we recommend that you use a release with long term support (LTS release). Non-LTS Ubuntu releases have very limited support cycles which may lead to difficulties downloading packages if used after their end-of-life date.</p>"},{"location":"Tools/Singularity/Building_containers/#building-containers-from-an-existing-base-image","title":"Building containers from an existing base image","text":"<p>This enables you to either build or use an existing container as a base image to build other containers. Base images must be built first if part of a dependency chain and is no longer required once all dependent containers have been built.</p>"},{"location":"Tools/Singularity/Building_containers/#singularity-local-images","title":"Singularity local images","text":"<p>The following example demonstrates the creation of a local base Ubuntu 20 (focal) image using definition file <code>ubuntu20_base.def</code>, and then creating another container with <code>python3</code> installed, using the local base image:</p> <pre><code>BootStrap: debootstrap\nOSVersion: focal\nMirrorURL: http://us.archive.ubuntu.com/ubuntu/\n</code></pre> <p>Create the base image:</p> <pre><code>sudo singularity build ubuntu20_base.simg ubuntu20_base.def\n</code></pre> <p>The non-base image container (i.e. <code>python3</code> in this example) can be built using definition file <code>ubuntu20_python3.def</code>:</p> <pre><code>Bootstrap: localimage\nFrom: ubuntu20_base.simg\n\n%post\n  apt-get install --yes python3\n\n%runscript\n  python3 \"${@}\"\n</code></pre> <p>The result will be a container almost identical to the one created from scratch.</p> <pre><code>sudo singularity build ubuntu20_python3.simg ubuntu20_python3.def\n</code></pre>"},{"location":"Tools/Singularity/Building_containers/#docker-images","title":"Docker images","text":"<p>You can also bootstrap from Docker containers, although if supplied by a third party, you have less visibility or control over these images, so use with caution, as this may impact the future reproducibility of results.</p> <p>The below example demonstrates installing the <code>python3</code> package within an Ubuntu 20 (focal) container using definition file <code>ubuntu20_docker_python3.def</code>, which imports the <code>ubuntu:20.04</code> base container available on the Docker Hub:</p> <pre><code>Bootstrap: docker\nFrom: ubuntu:20.04\n\n%post\n  apt-get update\n  apt-get install --yes python3\n\n%runscript\n  python3 \"${@}\"\n</code></pre> <p>Build the container. This will produce a container similar to the previous examples, but may vary slightly in overall size depending on packages installed in the base docker image:</p> <pre><code>sudo singularity build ubuntu20_docker_python3.simg ubuntu20_docker_python3.def\n</code></pre>"},{"location":"Tools/Singularity/Building_containers/#future-proofing-your-containers","title":"Future-proofing your containers","text":"<p>When building your own containers, be sure to make them portable and future-proof.</p> <ul> <li>Consider whether the container will still build and produce the same results if the OS release or application version changes.</li> <li>If copying files from a working directory as part of setup is unavoidable, ensure that any files copied from the working directory are are available for others to download (i.e. in a git repository if not large).</li> <li>Perform all setup as part of the build process. If any manual steps are performed after the container is built, they should be integrated within the definition file, and the container rebuilt.</li> <li>Consider if the ability to rebuild your container will be impacted by package updates, or deprecation of old releases.</li> </ul>  <p>Legacy versions of CentOS applications</p> <p>Outdated minor CentOS releases are moved from the main CentOS servers to vault.centos.org. If you need to use a specific Operating System or application version other than the latest, you need to future-proof your container by using the CentOS vault.</p>"},{"location":"Tools/Singularity/Building_containers/#definition-file-sections","title":"Definition file sections","text":"<p>The following example definition file demonstrates commonly used definition file sections:</p> <ul> <li><code>%help</code></li> <li><code>%post</code></li> <li><code>%environment</code></li> <li><code>%test</code></li> <li><code>%runscript</code></li> </ul>"},{"location":"Tools/Singularity/Building_containers/#help-section","title":"Help section","text":"<p>The <code>%help</code> section is designed to provide information about the container when singularity run-help is run on the container, for example:</p> <pre><code>$ singularity run-help /data/containers/public/python3_helloworld.simg\nPurpose: Test container to print \"Hello, World!\" in Python3.\nAuthor:  ITS Research / QMUL.\n</code></pre>"},{"location":"Tools/Singularity/Building_containers/#post-section","title":"Post section","text":"<p>The <code>%post</code> section contains the commands used to build the container, such as package installs, file downloads, compilation and software configuration.</p>"},{"location":"Tools/Singularity/Building_containers/#environment-section","title":"Environment section","text":"<p>Environment settings supplied at build-time in the <code>%post</code> section are only set during build-time and are not available at run-time. Environment settings which need to be available at run-time should be added to the <code>%environment</code> section.</p>"},{"location":"Tools/Singularity/Building_containers/#test-section","title":"Test section","text":"<p>The <code>%test</code> section defines a set of commands or tests which should be run to validate the container has been built successfully. Some example tests include:</p> <ul> <li>installed binaries are available on the <code>PATH</code> variable</li> <li><code>--help</code> or <code>--version</code> parameter for binaries (if supported)</li> <li>libraries, header files and man pages exist</li> </ul> <p>All tests will be run during the build process, after <code>%post</code> has completed. To build a container without running the tests, pass the <code>-T</code> or <code>--notest</code> option to the singularity build command.</p> <p>To run the tests for an existing container, run the singularity test command, for example:</p> <pre><code>$ singularity test /data/containers/public/python3_helloworld.simg\n/usr/bin/python3\n</code></pre>"},{"location":"Tools/Singularity/Building_containers/#runscript-section","title":"Runscript section","text":"<p>The <code>%runscript</code> section defines the default action a container will perform when ran as an executable or with <code>singularity run</code>. This is configured during the build process.</p>  <p>Application parameters or arguments</p> <p>If the runscript calls an application which takes parameters or arguments, include \"${@}\" after the application otherwise anything passed after the container name will be ignored by Singularity.</p>"},{"location":"Tools/Singularity/Building_containers/#inspecting-a-container","title":"Inspecting a container","text":"<p>To display information about how a container was build, use the <code>singularity inspect</code> command. The <code>-d</code> option to this command will print the definition file used to built the container and the <code>-r</code> option will print the runscript (if added during build-time). For example:</p> <pre><code>$ singularity inspect -d /data/containers/public/python3_helloworld.simg\nBootstrap: docker\nFrom: ubuntu:20.04\n\n%help\n  Purpose: Test container to print \"Hello, World!\" in Python3.\n  Author:  ITS Research / QMUL.\n\n%post\n  apt-get update\n  apt-get install --yes python3\n\n  apt-get clean &amp;&amp; \\\n   rm -rf /var/lib/apt/lists/*\n\n%test\n  which python3\n\n%runscript\n  python3 -c 'print(\"Hello, World!\")'\n</code></pre> <p>The <code>singularity help inspect</code> command provides additional options for inspecting the container.</p>"},{"location":"Tools/Singularity/Building_containers/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> <li>Carlos L\u00f3pez Elorduy</li> </ul>"},{"location":"Tools/Singularity/Overview/","title":"Overview","text":""},{"location":"Tools/Singularity/Overview/#singularity-containers","title":"Singularity containers","text":"<p>Linux containers are self-contained execution environments that share a Linux kernel with the host, but have isolated resources for CPU, I/O, memory, etc. A container can run a completely different Linux environment, without the overhead required by virtual machines.</p>"},{"location":"Tools/Singularity/Overview/#benefits-of-containers","title":"Benefits of containers","text":"<ul> <li>Reproducible science - containers can include an application and its dependencies, and be run on other systems where Singularity is installed.</li> <li>Version independent - run code designed for other versions of Linux e.g. Ubuntu packages on a CentOS system.</li> <li>Self-contained - allow isolation of complicated application installs.</li> </ul>"},{"location":"Tools/Singularity/Overview/#singularity","title":"Singularity","text":"<p>Singularity is a popular Open Source container solution designed for HPC. Unlike other container solutions such as Docker, it allows utilisation of GPUs and Infiniband interconnects for MPI jobs, and does not allow privilege escalation within a container, which would compromise the security in a multi-user environment with a shared filesystem.</p>"},{"location":"Tools/Singularity/Overview/#using-singularity-on-the-bbgcluster","title":"Using Singularity on the bbgcluster","text":"<p>Singularity is available as a system package on the bbgcluster. We may update the version of Singularity installed on the cluster to address security vulnerabilities or to provide extra features as they become available. Recently, the default version of Singularity has been changed to singularity v3, although Singularity v2 can still be used with the command <code>singularity2</code>.</p>"},{"location":"Tools/Singularity/Overview/#resources","title":"Resources","text":"<p>Containers built by ITS Research are stored in <code>/data/containers</code> and are supported in a similar way to the globally available supported applications. Applications installed within Singularity containers may also be provided as a module to abstract the container invocation commands. See the Singularity usage page for more information about containers provided as modules.</p>"},{"location":"Tools/Singularity/Overview/#further-reading","title":"Further reading","text":"<ul> <li>Singularity website</li> <li>Running <code>singularity help</code> and <code>singularity CMD help</code> (replace <code>CMD</code> with a Singularity command, such as <code>run</code>)</li> <li>Viewing the \"singularity\" manual page</li> </ul>"},{"location":"Tools/Singularity/Overview/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> <li>Carlos L\u00f3pez Elorduy</li> </ul>"},{"location":"Tools/Singularity/Using_containers/","title":"Using containers","text":""},{"location":"Tools/Singularity/Using_containers/#running-commands-inside-a-container","title":"Running commands inside a container","text":"<p>The <code>singularity exec</code> command will allow you to execute any program within a given container. The <code>singularity run</code> command performs the action defined by the <code>%runscript</code> section, which is the primary task of the container. Using the <code>singularity run</code> command is the simpler approach for job submissions.</p> <p>You can even \"execute\" a container, which performs the same action as the <code>singularity run</code> command. For example, the following demonstrates how to inspect the runscript and execute the <code>/data/containers/public/python3_helloworld.simg</code> container:</p> <pre><code>$ singularity inspect -r /data/containers/public/python3_helloworld.simg\n#!/bin/sh\n  python3 -c 'print(\"Hello, World!\")'\n\n$ /data/containers/public/python3_helloworld.simg\nHello, World!\n\n$ singularity run /data/containers/public/python3_helloworld.simg\nHello, World!\n</code></pre>"},{"location":"Tools/Singularity/Using_containers/#execute-a-script-from-outside-the-container","title":"Execute a script from outside the container","text":"<p>Using on the cluster</p> <p>For typical use, you want to use the singularity run or singularity exec commands, especially when submitting the work via the scheduler.</p>  <p>The following example runs a python script <code>hello_world2.py</code> from the current directory using the <code>/data/containers/public/python3_helloworld.simg</code> container:</p> <pre><code>$ singularity exec /data/containers/public/python3_helloworld.simg python3 ./hello_world2.py\nHello, World!\nHello, World (again)!\n</code></pre> <p>The file hello_world2.py contains the following code:</p> <pre><code>print(\"Hello, World!\")\nprint(\"Hello, World (again)!\")\n</code></pre> <p>If command <code>singularity exec</code> was replaced by <code>singularity run</code>, the runscript would be called, ignoring any parameters after the container name.</p>  <p>Customised Environments</p> <p>While we encourage users to customise their environment to make their workflow easier, please be aware that customisations which change the user's environment for example by setting variables in the ~/.bash_profile file, or by using python's pip to create a ~/.local folder, may cause problems with Singularity which can be difficult to troubleshoot.</p>"},{"location":"Tools/Singularity/Using_containers/#using-containers-with-grid-engine","title":"Using containers with Grid Engine","text":"<p>One of the major benefits of Singularity is the simplicity with which it can be used in an HPC environment. Your Grid Engine submission script may not require any modules loading to run your container. The resource requirements should be very similar to native code.</p>"},{"location":"Tools/Singularity/Using_containers/#simple-example","title":"Simple example","text":"<pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\nsingularity run /data/containers/public/python3_helloworld.simg\n</code></pre>"},{"location":"Tools/Singularity/Using_containers/#modules-example","title":"Modules example","text":"<p>Applications installed within Singularity containers may also be provided as a module to abstract the container invocation commands (<code>singularity run</code> and <code>singularity exec</code>). In these cases, the container name will match the runscript command. For example, to use Pandoc as a module, simply load the <code>pandoc</code> module to use the application.</p> <pre><code>#!/bin/bash\n#$ -cwd\n#$ -j y\n#$ -pe smp 1\n#$ -l h_rt=1:0:0\n#$ -l h_vmem=1G\n\nmodule load pandoc\npandoc --help\n</code></pre>"},{"location":"Tools/Singularity/Using_containers/#shell-access-to-the-container","title":"Shell access to the container","text":"<p>It is possible to launch a shell within the container using the <code>shell</code> command. Interacting directly with a shell inside the container can be useful for code debugging and running multiple commands in a single interactive session, as an alternative to writing a single script. Below demonstrates how to invoke python3 from inside the <code>/data/containers/public/python3_helloworld.simg</code> container using an interactive shell:</p> <pre><code>$ singularity shell /data/containers/public/python3_helloworld.simg\nSingularity&gt; python3\nPython 3.8.10 (default, Sep 28 2021, 16:10:42)\n[GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre> <p>Documentation is available on the Singularity Hub Wiki</p>"},{"location":"Tools/Singularity/Using_containers/#running-containers-from-external-sources","title":"Running containers from external sources","text":"<p>Use of external containers for Research</p> <p>For long term reproducibility of containers, we recommend that you build your own native Singularity containers from definition files instead of relying on 3rd party containers for your research. Using containers from external sources may produce undesirable results if the container is rebuilt after upstream changes such as updated or obsoleted packages.</p>  <p>Containers created elsewhere can be copied or imported, and run on the cluster. The following example demonstrates how to import and run the latest Ubuntu official image stored in the Docker Hub:</p> <pre><code>$ singularity pull ubuntu.simg docker://ubuntu:latest\n$ singularity exec ubuntu.simg cat /etc/lsb-release\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.3 LTS\"\n</code></pre>"},{"location":"Tools/Singularity/Using_containers/#reference","title":"Reference","text":"<ul> <li>Jordi Deu-Pons</li> <li>Miguel Grau</li> <li>Carlos L\u00f3pez Elorduy</li> </ul>"},{"location":"Tools/VSCode/cluster_node/","title":"VSCode in interactive node","text":""},{"location":"Tools/VSCode/cluster_node/#description","title":"Description","text":"<p>These are the instructions to use Visual Studio Code to run and debug scripts/notebooks within an interactive node from the cluster.</p>"},{"location":"Tools/VSCode/cluster_node/#requirements","title":"Requirements","text":"<ul> <li>Conda or Mamba installed</li> <li>Have an account on ngrok</li> </ul>"},{"location":"Tools/VSCode/cluster_node/#create-a-conda-environment","title":"Create a conda environment","text":"<p>The conda environment must include the packages <code>code-server</code>, <code>pyngrok</code> and <code>screen</code></p> <pre><code>conda create -n vsc_node -c conda-forge code-server screen pyngrok -y\nconda activate vsc_node\n</code></pre>"},{"location":"Tools/VSCode/cluster_node/#run-code-server-in-a-screen-inside-login01","title":"Run code server in a screen (inside <code>login01</code>)","text":"<pre><code>screen -S vscode\n</code></pre> <p>Right after creating the screen, create an interactive session and remember on which node you are allocated.</p> <pre><code>interactive\nconda activate vsc_node\ncode-server\n</code></pre> <p>Exit the screen with <code>Ctrl + A + D</code></p>"},{"location":"Tools/VSCode/cluster_node/#run-a-ngrok-tunnel-in-a-screen-inside-login01","title":"Run a Ngrok tunnel in a screen (inside <code>login01</code>)","text":"<p>Note</p> <p>If this is your first time doing this step, you'll first need to setup your authentification token for ngrok.</p> <ol> <li>Log in to your ngrok home page.</li> <li>On the left-hand side bar: <code>Getting Started &gt; Your Authtoken</code></li> <li>On the <code>Command Line</code> section, copy only the key, which is the big string with random letters and numbers.</li> <li> <p>Go back to the terminanl in the cluster (with the <code>vsc_pyngrok</code> environment activated) and add your authentification token with the following command:</p> <p><code>ngrok authtoken &lt;the_token_you_copied_in_the_previous_step&gt;</code></p> </li> </ol> <p>This setup only has to be done once.</p>  <pre><code>screen -S pyngrok\n</code></pre> <pre><code>interactive -w &lt;bbgnXXX&gt; # Node of previous step\nconda activate vsc_node\npyngrok http 8080\n</code></pre> <p>Copy the URL to your browser and exit the session <code>Ctrl + A + D</code></p>"},{"location":"Tools/VSCode/cluster_node/#check-your-vscode-password","title":"Check your VSCode password","text":"<pre><code>cat ~/.config/code-server/config.yaml\n</code></pre>"},{"location":"Tools/VSCode/cluster_node/#browse-your-vscode-remotely","title":"Browse your VSCode remotely","text":"<p>When entering the URL in your browser, click <code>Visit site</code> and introduce the password you obtained in the previous step in order to be able to use VSCode.</p>"},{"location":"Tools/VSCode/cluster_node/#reference","title":"Reference","text":"<ul> <li>Jordi Deu Pons</li> <li>Carlos L\u00f3pez Elorduy</li> <li>Federica Brando</li> </ul>"}]}